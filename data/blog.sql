-- Adminer 4.8.1 MySQL 10.4.24-MariaDB dump
CREATE DATABASE `blog` COLLATE 'utf8mb4_general_ci';
USE `blog`;

SET NAMES utf8;
SET time_zone = '+00:00';
SET foreign_key_checks = 0;
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

SET NAMES utf8mb4;

DROP TABLE IF EXISTS `post`;
CREATE TABLE `post`
(
    `id`             int(11)      NOT NULL AUTO_INCREMENT,
    `title`          varchar(255) NOT NULL,
    `link`           varchar(255) NOT NULL,
    `date_published` varchar(255) NOT NULL,
    `content`        text         NOT NULL,
    `likes`          int(11)      NOT NULL DEFAULT 0,
    `category`       tinyint(4)   NOT NULL,
    `deleted`        tinyint(1)   NOT NULL DEFAULT 0,
    PRIMARY KEY (`id`)
) ENGINE = MyISAM
  DEFAULT CHARSET = utf8mb4;

TRUNCATE `post`;
INSERT INTO `post` (`id`, `title`, `link`, `date_published`, `content`, `likes`, `category`, `deleted`)
VALUES (1, 'Zjištění skutečné příčiny neúspěchu', 'zjisteni-skutecne-priciny-neuspechu', '2020-12-10',
        '<p>Jednou z technik, jak přijít na jádro problému se kterou jsem se v životě setkal je <strong>&quot;Why five&quot;</strong>\n<br>\nV čem spočívá a proč je dobrá?\n<br>\nUrčitě jste slyšeli něco o zjištění skutečné příčiny. Často to řeší technici, když bez zjevného důvodu selže součástka, u které to nikdo nečekal.\n<br>\nTaké to řeší doktoři, protože stejně jako automobil spolu souvisí hlavní ústrojí v lidském těle. Dá se to pozorovat a zjistit z různých úhlů.\n<br>\nKdyž je například při nastartování auta vidět modrý dým, je to indikátor toho, že auto spotřebovává olej a motor špatně těsní. Podobně může doktor poznat ledvinové kameny jako malá zrnka v lidské moči.\n<br>\nTechnika se používá hojně v automobilce Toyota, která má jedny z nejlepších výsledků ohledně spolehlivosti jimi vyráběných automobilů. Jejich zkušenosti ukázaly, že když se 5 x za sebou zeptáte proč, doberete se ve většině případů ke skutečné příčině problému.\n<br>\nPříklad z wikipedie:</p>\n<ol>\n<li>otázka: Tati, proč to auto nejede?\nodpověď: Protože nemá benzín.</li>\n<li>otázka: A proč nemá benzín?\nodpověď: Protože jsem ho zapomněl koupit.</li>\n<li>otázka: A proč jsi ho zapomněl koupit?\nodpověď : Protože jsem nevěděl, že nám dochází.</li>\n<li>otázka: A proč jsi nevěděl že nám dochází?\nodpověď: Protože je tma a nevidím na palivoměr.</li>\n<li>otázka: A proč nevidíš na palivoměr?\nodpověď: Protože jsem nevyměnil prasklou osvětlovací žárovku v přístrojové desce.</li>\n</ol>',
        0, 0, 0),
       (2, 'Zkušenosti s vývojem software', 'zkusenosti-s-vyvojem-software', '2020-10-23',
        '<h3>Nasdílím zde pár tipů, faktů a zkušeností, které se mi osvědčily při tvorbě aplikací a programů.</h3>\n<ol>\n<li>než jdu dál, zastavím se a zeptám se sám sebe, jestli opravdu chápu co dělám, pro koho a za jakým účelem</li>\n<li>jak dobře jsem odpočatý a soustředěný má mnohem větší vliv na kvalitu výsledku, než jazyk ve kterém programuji</li>\n<li>občas zpomal a splácej včas svůj technický dluh</li>\n<li>než něco rozhodneš, zamysli se nad důsledky navrhovaného řešení v širším kontextu</li>\n<li>je lepší si počkat na specifikaci a nedomýšlet nebo odhadovat</li>\n</ol>\n<h3>Nyní trochu vysvětlím a popíšu jednotlivé body a kde se dají použít</h3>\n<ol>\n<li>Je daleko efektivnější jít pomalu, ale správným směrem, než sprintovat co nejrychleji to jde neznámo kam. Ten, kdo určuje jak má aplikace fungovat je především koncový uživatel. Pokud pro něj aplikace nebo webový stránka není přínosná, pochopitelná a jednoduchá na použití, je jedno jak vypadá a jakým jazykem je naprogramovaná. Použití nejmodernějších technik, doplňků nebo animací je k ničemu, když je nikdo nevyužívá a tedy ani neocení.</li>\n<li>Pracuji li ve firmě nebo společně s kolegou na stejném projektu, je zásadní, abychom oba programovali ve stejném jazyku a verzi. Například PHP 7 s využitím frameworku XY a objektového konceptu programování, data ukládaná do SQL databáze. Koncovému uživateli a tím částečně i zákazníkovi je to ale jedno. Pro něj je důležitější, abych dodal práci dotaženou do konce, včas a s minimem chyb. Na případné chyby přijdeme společně v režimu testování nebo v prvním týdnu po nasazení.</li>\n<li>Seznam restů nemá cenu vytvářet a udržovat, pokud se v něm úkoly jen donekonečna hromadí. Technický dluh je potřeba postupně splácet. Včasným řešením dosavadních problémů mohu přijít na další problém, který by se jinak ukázal až po nasazení. Také to usnadňuje samotnou náročnosti korekce. Protože čím dříve si něčeho všimnu a opravím to, tím dřív to můžu začít psát lépe (správně) a tím méně korekcí celkem bude.</li>\n<li>Co, když budu potřebovat víc, než 1 jazykovou verzi? Co když budu muset zpracovat více než 1 soubor nebo datový typ? Co když zákazník nebo uživatel bude chtít něco změnit, když už to mám skoro hotové? Je lepší se na chvíli realisticky zamyslet, jak to asi bude v reálu a případné návrhy konzultovat nebo zákazníka nechat testovat na beta verzi. Dělat zásadní změny v architektuře těsně předtím, než je projekt hotový znamená tunu testování a tedy času navíc, kromě změn samotných. Je snazší udělat pokročilejší řešení jednou, otestovat ho a potvrdit, než udělat jednoduché řešení, které pak doplňuji, vymýšlím různé triky jak to obejít a nakonec stejně sám uznám, že je potřeba předělat to celé.</li>\n<li>Skvělá zásada z konceptu funkčního programování je dělat jednoduché funkce, které umí jednu věc výborně ne dvě věci průměrně. Z dobře napsaných, srozumitelných a efektivních funkcí se dá program snadno poskládat. Zjednoduší to navíc celé testování, hledání a opravování chyb. Správně definované požadavky velmi usnadňují práci a domluvu. Zadání může být černé, nebo bílé, ale nemělo by být šedé. Chcete jablko? Fajn. Chcete hrušku? OK. Ale nechtějte prosím něco mezi tím. A nebo se pak alespoň nedivte, že se vám to ve finále prodraží víc než hruška i jablko dohromady.</li>\n</ol>',
        0, 0, 0),
       (3, 'Základní principy SEO', 'zakladni-principy-seo', '2020-10-23',
        '<p>Co je to SEO?\nZkratka která znamená optimalizace pro vyhledávače. Je to metodika, která vychází z principů fungování <a href=\"https://www.jakpsatweb.cz/vyhledavace.html\">vyhledávačů</a> (Google, Seznam, Bing...). Algorytmy vyhledávačů se čas od času mění, nastavují se jiné priority, bezpečnostní kontroly atd.\n<br>\nOptimalizace pro vyhledávač je v podstatě podobná a stejně prioritní, jako je nastavení snadného přístupu a intuitivního ovládání webové stránky nebo aplikace pro koncového uživatele.\n<br>\nSlouží k tomu, aby se &quot;síťový pavouk/robot&quot; dokázal snadno na našem webu zorientovat. Když to zvládne, zaznamená si informace, které našel a ty se pak po pár dnech, nejpozději týdnech projeví ve výsledcích vyhledávání.</p>\n<h3>ZÁKLADNÍ PRINCIPY SEO</h3>\n<ul>\n<li>vyplnit <a href=\"https://cs.wikipedia.org/wiki/HTML_title\">titulek stránky</a></li>\n<li>vyplnit <a href=\"https://www.jakpsatweb.cz/meta-tagy.html#description\">popisek</a> (do 150 znaků)</li>\n<li>nastavit <a href=\"https://cs.wikipedia.org/wiki/HTML5#Jazyk_dokumentu_a_k%C3%B3dov%C3%A1n%C3%AD\">kódování</a> (utf-8)</li>\n<li>nastavit <a href=\"https://www.jakpsatweb.cz/meta-tagy.html#cestina\">správný jazyk</a> (cs, en)</li>\n<li>použít <a href=\"https://cs.wikipedia.org/wiki/HTML5#Struktura\">HTML5 sémantiku</a> (header, main, section, article, footer)</li>\n<li>dodržovat zásady <a href=\"https://cs.wikipedia.org/wiki/Typografie\">správné typografie</a> (max. jeden hlavní nadpis h1 na stránku atd.)</li>\n<li>vhodný výběr názvu domény (hodinovy-manzel-pardubice.cz)</li>\n<li>propojit web funkčními linky</li>\n<li>texty odkazů (nepsat &quot;klikni zde&quot;, ale raději &quot;odkaz na detail článku&quot;)</li>\n<li>rozlišení interních a externích (směřujících mimo web) odkazů</li>\n<li>navigace stylu ul &gt; li</li>\n<li>dobrá viditelnost navigace na mobilu</li>\n<li><a href=\"https://www.seoconsult.cz/blog/drobeckova-navigace\">drobečková navigace</a> alias <em>breadcrumbs</em></li>\n<li>hezké-url-adresy (mujweb.cz/nazev-tohoto-clanku)</li>\n<li>zvýraznit a použít vhodná <a href=\"https://www.jakpsatweb.cz/meta-tagy.html#klic\">klíčová slova</a> (headings)</li>\n<li>použít <a href=\"https://cs.wikipedia.org/wiki/Zp%C4%9Btn%C3%BD_odkaz\">zpětné odkazy</a> (na a z jiných webů)</li>\n<li>propojení se sociálními médii (<a href=\"facebook.com\">facebook</a>, <a href=\"linkedin.com\">linkedIn</a>, <a href=\"instagram.com\">instagram</a>, <a href=\"twitter.com\">twitter</a>)</li>\n<li>nastavit <a href=\"https://www.jakpsatweb.cz/meta-tagy.html#presmerov%C3%A1n%C3%AD\">přesměrování</a> (vyhnout se chybě 404)</li>\n<li>https protokol (preferovaný bezpečnější protokol)</li>\n<li><a href=\"https://www.jakpsatweb.cz/robots-txt.html\">robots.txt</a>(instrukce pro roboty)</li>\n<li><a href=\"https://cs.wikipedia.org/wiki/Sitemap\">sitemap</a> (mapa struktury daného webu)</li>\n<li>canonical, nofollow... (označit robotovi url, které nemá prověřovat)</li>\n<li>kvalitní (a legálně získané) obrázky</li>\n<li><a href=\"https://www.jakpsatweb.cz/html/obrazky.html\">alt u obrázků</a> (alt je text, který se zobrazí, pokud selže načtení obrázku, nebo pro webové čtečky)</li>\n<li>stručné a trefné <a href=\"https://www.seoconsult.cz/blog/vytvorte-nadpisy-ktere-zaujmou-uzivatele-i-vyhledavace\">nadpisy</a> - prvních 5 slov by mělo vystihnout pointu (ceny bytů vloni rekordně stouply)</li>\n<li>obsah / délka odborných článků - 2 Normo strany (3600 znaků)</li>\n<li>v neposlední řadě bychom neměli porušit cizí copyright &copy;</li>\n<li>výsledné html nakódování by mělo být validní a dobře fungující i na mobilech ()</li>\n</ul>',
        0, 0, 0),
       (4, 'Work life balance', 'work-life-balance', '2020-10-25',
        '<p>Co si představujete pod pojmem vyváženost mezi pracovním a osobním životem?\n<br>\nJá tento pojem vnímám jako nastavení si vlastních hranic. Mám určité možnosti a určitý čas. Stanovím si tedy, kolik času chci věnovat konkrétní práci (ať už soukromé nebo v zaměstnání). Nebo kolik práce dnes, tento týden, měsíc odvedu.\n<br>\nOdpočinek má zásadní vliv na pracovní efektivitu, chybovost a náladu. Odpočívat je potřeba, aby se člověk necítil jako otrok, aby nevyhořel a aby se mu práce neznechutila.\n<br>\nJedním ze způsobů, jak si odpočinout od práce je dovolená.\n<br>\nPokud se chystáte vyrazit někam za hranice možná se vám bude hodit kalkulátor přepočtu měn.\n<br>\nJeden takový jsem vytvořil. Můžete si zadat dvě libovolné měny a částku. Jedním klikem zjistíte, kolik budete potřebovat nebo kolik co stojí.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/currency_exchange_calculator/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/currency_exchange_calculator\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (5, 'Výzvy a překážky v programování', 'vyzvy-a-prekazky-v-programovani', '2021-01-25',
        '<p>Když se o něco snažíte, začnou vám chodit výzvy a zkoušky. Jde o to, jak je překonat a nenechat se jimi odradit.\n<br>\nV programování jsem si všiml během prvních dvou let hned několika výzev, které nebyly spojeny jen s trpělivostí a vytrvalostí. Důležité jsou i věci, které bych nečekal, některé mi přijdou skoro paradoxní.</p>\n<h2>Neučit se vše, co se nabízí</h2>\n<p>Na světě jsou desítky doplňků, nástrojů pro zjednodušení práce a řada frameworků snad pro každý jazyk. Většina z nich je navíc open source a free. Nejen, že je potom o něco těžší si na začátku vybrat, ale náročné je i naučit se nešilhat po nejrůznějších novinkách a trendech.</p>\n<h2>Najít si svou specializaci</h2>\n<p>Říká se: &quot;Kolik jazyků znáš, tolikrát jsi člověkem&quot;. To platí do jisté míry i o jazycích programovacích. Při učení dalšího jazyka často zjistíte, že toho mají mnohem víc společného, než odlišeného. A práve tohle je oblast, ve které je potřeba být fakt dobrý. Mít velmi dobře zvládnuté základy. Navíc některé jazyky více vynikají v určitém směru použití a to je na nich skvělé. Když programátor ovládá určitý jazyk na 50% tak to neznamená, že když pracuje se stejně zdatným kolegou tak dohromady umí 100%. Firma sice potřebuje řešit i zastupitelnost pracovníků, ale pořád je lepší, když mám odborníka na front end, back end, databázi a server, než když umí každý z nich trochu od všeho.</p>\n<h2>Naučit se nejen konkrétní ale i abstraktní myšlení</h2>\n<p>Myšlení abstraktně je velmi důležité. Umět vidět spojitosti, podobnosti, systémovost čili skrytý řád podobně jako detektiv. Tyto společné znaky se dají využít na zpracování velkého množství dat jednou dobře napsanou funkcí. A v tom je asi největší síla programování. Že jeden člověk prozkoumá data a napíše instrukce pro počítač, který pak může pracovat dnem i nocí. Počítače pracují mnohem rychleji než lidi, dělají méně chyb a vždy dodrží daný postup. Nejsou kreativní jako lidé a právě proto se tak skvěle hodí na rutinní práci. A když se rozbijí, celkem snadno se nahradí a pokračují tam, kde práce skončila. Člověk tak řeší jen vyjímky a výpadky.\n<br>\nProto je potřeba naučit se z článků, video návodů, seminářů nejen konkrétní řešení problému. Ale odnést si z toho mnohem víc. A sice způsob přemýšlení, řešení a analyzování situace. Odnést si něco, co lze aplikovat i na jinou situaci, z čeho můžu částečně čerpat inspiraci.</p>\n<h2>Pravidelně se vracet k základům a posilovat je</h2>\n<p>Jaké věci potkáte ve většině jazycích?\n<br>\n<strong>Smyčky</strong> umožňují zpracovat velké množství dat. Nebo x-krát spustit nějakou sadu instrukcí.\n<br>\n<strong>Intervaly</strong> se jednou za x času spustí danou část kódu.\n<br>\n<strong>Funkce</strong> seskupí a uloží sadu konkrétních instrukcí a lze ji tak přepoužívat znovu a znovu.\n<br>\n<strong>Podmínky</strong>, které si poradí s určitými odlišnostmi. A díky kterým můžete spustit jednu fuknci na data různého typu a přesto bude výsledek správně.\n<br>\n<strong>Třídy</strong> definují a pomáhají tvořit <strong>objekty</strong>. Třídy mohou používat abstrakci, dědičnost a nastavit určité základní bezpečnostní zásady pro přístup k jejich vlastnostem a metodám.\n<br>\n<strong>Rekurze</strong> umožňuje vyřešit komplexní problém opakováním řešení jeho jednotlivých kroků.\n<br>\n<strong>Abstrakce</strong>, kterou používají funkce i objekty, bez které by se kód rozbil při sebemenší změně vstupních parametrů.</p>\n<h2>Vnímat rozdíl funkcionality a syntaktického zkrášlení</h2>\n<p>Když přijde nová verze úprav a rozšíření programovacího jazyka nebo frameworku je důležité rozpoznat co přináší. Co je jen zkratka, zjednodušení zápisu a co je zásadní změna v chování, funkčnosti kódu, který je nyní možné spustit.\n<br>\nNejde navíc jen o rozdíly v různých verzích. Jde i o to, že stejná věc lze zapsat různými způsoby i v rámci totožné verze jazyku.</p>\n<h2>Naučit se kód kvalitně psát, aby ho šlo rychle a jednoduše číst</h2>\n<p>Jsou případy, kdy něco napíšete a pak už to nikdy neuvidíte. Ve většině případů se ale ke kódu vracíte. A pokud jste si nadělali technický dluh, tak ho budete buď tlačit před sebou znovu a znovu, kdykoliv do kódu nahlížíte a něco upravujete, přidáváte. Nebo ho budete řešit později, ale to se vám nemusí z časových důvodů hodit. Zpracujte každý řádek na určitou rozumnou míru optimalizace ještě v době, kdy kódu rozumíte a máte informace o něm a vnitřní vazby v hlavě čerstvé a dobře zmapované. Dobré zásady formátování, pojmenovávání a řazení v kódu ocení váš spolupracovník, šéf i vy až na to přijde čas. A to v každém jazyku.</p>\n<h2>Vytvářet reálné příklady a aplikace</h2>\n<p>Kód, který opíšete z návodu, článku nebo videa je hezký začátek. Máte tak jistotu, že daný příklad funguje a můžete jej studovat a vzít si jej jako referenci. Je ale potřeba realizovat své vlastní nápady, nebo alespoň opsaný kód trochu vylepšit, rozšířit a přitom nerozbít. Dodělat tam něco svého, dát do toho nějaký svůj nápad. Jinak se člověk nenaučí to, co programování předchází: nápad, návrh, skica, schéma, popis, teoretický rozbor architektury. Nenaučíte se ani myslet dopředu, jak to bude fungovat, když se měřítko aplikace zvýší 10x. Když bude chtít někdo provozovat web v pěti jazycích, jak se pak rozpozná, odkud má přijít obsah ve správné jazykové verzi atd.</p>',
        0, 0, 0),
       (6, 'Výhody webových aplikací', 'vyhody-webovych-aplikaci', '2020-10-23',
        '<p>Pokud ve vaší firmě potřebujete aplikaci, není nutné hned pořizovat software na zakázku.\n<br>\nWebové aplikace jsou populární z několika dobrých důvodů.</p>\n<ul>\n<li>Zabezpečení</li>\n<li>Jednoduchost</li>\n<li>Zálohování</li>\n<li>Přístupnost</li>\n<li>Kompatibilita</li>\n<li>Dostupnost</li>\n<li>Změny</li>\n<li>Verzování</li>\n<li>Flexibilita</li>\n<li>Rychlost</li>\n</ul>\n<h3>Zabezpečení</h3>\n<p>Jednoduché rozhraní vám umožní udělovat přístup a privilegia. Můžete tak hravě za pár vteřin vytvořit přístup pro nahlížení (pro zákazníka) či úpravy (pro kolegu). A nikdo jiný se vám tam nedostane, pokud nechcete. Případně můžete oddělit přihlášeného a anonymního uživatele a přístup patřičně ošetřit.\n<br>\n<strong>Webová aplikace je stejně (nebo i více) bezpečná jako softwarový program</strong></p>\n<h3>Jednoduchost</h3>\n<p>Nemusíte se nic učit (Excel, SAP, Lotus Notes). Ve webové aplikaci se zadávání a validace dat dá zjednodušit a zautomatizovat natolik, že to zvládne každý běžný uživatel pc.\n<br>\nTím, že se dá snadno formulář rozdělit na několik kroků navíc uživatele nevyděsíte tím, že bude muset vyplnit 15 polí.\n<strong>Zjednodušte si život a nebojte se webových aplikací</strong></p>\n<h3>Zálohování</h3>\n<p>Zálohování je samozřejmost. Na serveru se dá snadno nastavit a zautomatizovat. Váš pc k tomu není potřeba. Pokud se vám váš přístroj porouchá nebo ztratí, je to sice stále nepříjemné, ale neprohráli jste.\n<strong>Buďte v klidu a využijte výhod automatizace</strong></p>\n<h3>Přístupnost</h3>\n<p>Také se vám stalo, že kolega, který měl otevřen důležitý dokument v excelu odešel na oběd a zapomněl ho zavřít? Dost možná je soubor v takovém případě dostupný jen pro čtení všem ostatním. A nikdo jiný v něm nemůže dělat změny.\n<br>\nNebo máte starší excel a potřebný soubor jím nemůžete otevřít, nebo jsou v něm chyby a nejde vám s ním plnohodnotně pracovat?\n<br>\n<strong>Nic z toho se vám s webovou aplikací nestane.</strong></p>\n<h3>Kompatibilita</h3>\n<p>Ve firmě máte Windows, ajťák má Linux a zákazník má Apple (MacOS). Jak to uděláte, aby byl software funkční na všech platformách? Budete dělat 3 verze? Co když se zákazníkovi zobrazují chyby, kterých si nikdo předtím nevšiml?\n<br>\n<strong>Na webovou aplikaci se dostanete z jakéhokoliv systému.</strong></p>\n<h3>Dostupnost</h3>\n<p>Narychlo jste museli opustit firmu a nechat tam pracovní počítač. Jak se dostanete k tomu, co máte na vnitřní síti (LAN) nebo na svém pracovním pc? Existuje hromada řešení synchronizace dat na online úložiště (Cloud)\n<br>\n<strong>S webovou aplikací máte přístup máte stále sebou, kdekoliv jste připojeni na internet.</strong> Stačí vám pamatovat si heslo (někdy ani to není potřeba). V nouzovém případě tak můžete fungovat i z telefonu na dovolené, aniž byste se museli vracet nebo někam přejíždět.</p>\n<h3>Změny</h3>\n<p>Kód se dá snadno upravit a některé funkce upravit, omezit, zablokovat, rozšířit. Stačí jedno nahrání na server a změna se projeví u všech. Uživatelé navíc nemusí nic ručně aktualizovat, stahovat, instalovat. <strong>Změny ve webové aplikaci se promítnou automaticky.</strong></p>\n<h3>Verzování</h3>\n<p>S technologií GIT (od tvůrce Linux OS) je tvorba oddělených verzí jednoduchou záležitostí. Nejen data, která jste zadali do aplikace, ale i zdrojový kód musí mít svoje zálohy.\nPokud chcete například pro některé zákazníky udělat VIP přístup s více funkcemi nebo právy, snadno vytvoříte oddělenou verzi. Například www.nase-aplikace.cz/v2 nebo www.nase-aplikace.cz/vip. To samé se dá použít, pokud z nějakého důvodu chcete zároveň provozovat starší verzi aplikace, verzi pro mezinárodní použití nebo testovací verzi před vydáním.\n<strong>Webová aplikace se dá přizpůsobit vám, abyste měli to, co potřebujete</strong></p>\n<h3>Flexibilita</h3>\n<p>Webové aplikace se dají udělat tzv. <a href=\"https://cs.wikipedia.org/wiki/Progresivn%C3%AD_webov%C3%A9_aplikace\">progresivně</a>. To znamená, že se data ukládají, i když jste offline. Aplikace je odešle, až to bude možné. <strong>Není se tedy třeba bát, o svá data nepřijdete.</strong></p>\n<h3>Rychlost</h3>\n<p>Není potřeba spouštět na pozadí systému další proces. Jen otevřete záložku v prohlížeči a pracujete.\nServer, na kterém aplikace běží je většinou vybaven chytrými funkcemi, které přidělí hardwarové zdroje podle zatížení (počtu uživatelů). <strong>Vaše firma nebo produkt tedy může snadno a bez překážek růst.</strong></p>',
        0, 0, 0),
       (7, 'Výhody studia více programovacích jazyků', 'vyhody-studia-vice-programovacich-jazyku', '2020-11-03',
        '<p>Možná byste si řekli, že studium více jazyků se nemusí nutně vyplatit. Protože vrátit se zpět na začátek a učit se od základů jiný programovací jazyk znovu zabere dost času. A možná to nepřinese tolik užitku jako posouvat se dále v progracím jazyku, který se člověk učil doposud.\n<br>\nNení to ale tak černé, jak se to může zdát.\n<br>\nProgramovací jazyky toho mají mnoho společného. Víc, než by člověk řekl. A rozdíly jsou často minimální a povětšinou jen syntaktické.\n<br>\nLogické, matematické a binární operace, porovnávání, podmínky, datové typy, smyčky, funkce, objekty a třídy...\n<br>\nPři studiu jazyka Python jsem si uvědomil, kolik toho z PHP a JavaScriptu mohu přepoužít. Stačí si jen zvyknout na pár rozdílů. A zároveň to byla možnost si danné znalosti zopakovat, procvičit mozek a přizpůsobit ho jiné syntaxi.\n<br>\nNavíc díky tomu můžu ocenit, čím je Python odlišný a v čem je třeba lepší, než ostatní jazyky.\n<br>\nMne na něm zaujalo například to, že není postaven na závorkách ohraničující rozsah funkce nebo podmínek, které platí v určitém případě. Místo toho je nastaven na odsazení, což z něj dělá v některých případech lepšího adepta na čitelný kód.\nProgramátoři, kteří v něm začnou pracovat jsou tak navíc vedeni k dobrým základům přístupem k formátování svého kódu.\n<br>\nNa PHP a JavaScriptu je zase hezké, že jej můžu spustit přímo v prohlížeči a pouhým přenačtením otevřené stránky  zkontrolovat výsledky a porovnat změny.\nKaždopádně se jeho studium alespoň ze začátku jeví jako nenáročné a přirozené.</p>',
        0, 0, 0),
       (8, 'Výhody ORM - objektově relačního mapování', 'vyhody-orm-objektove-relacniho-mapovani', '2020-11-17',
        '<p><strong>Objektově relační mapování</strong> zajišťuje konverzi dat mezi <strong>relační databází</strong> a objektově orientovaným programovacím jazykem.\n<br>\nZajišťuje tedy, aby se mohl správně vytvořit objekt, který reprezentuje jednu entitu (jednotku) z databáze. <strong>Entita</strong> může být jeden řádek v tabulce nebo přesně <strong>definovaná množina dat</strong>. Například při přihlášení do aplikace vznikne jeden konkrétní uživatel.\n<br>\nVytvoření konkrétního objektu dává vývojáři možnost snadno a jednotně pracovat se správnými daty bez nutnosti psát SQL. Tato <strong>automatizace</strong> velmi <strong>urychluje vývoj</strong> nových funkcionalit a výrazně <strong>snižuje riziko chyby</strong> v datových operacích (čtení, tvorba, změna nebo mazání dat). Dále umožňuje snadné uchování a správy logiky z jednoho místa.\n<br>\nOOP navíc poskytuje vývojáři možnost pracovat s objektovou <strong>dědičností</strong>, kterou relační databáze neumožňuje. A lze tak snadno definovat pravomoce, rozsah umožněných činností. Neposlední výhodou je znovu použitelnost kódu bez nutnosti opakovat stejné příkazy.</p>\n<h4>Ukázky</h4>\n<p><strong>vytvoření nového uživatele v tabulce pomocí objektu:</strong>\n<br>\n<code></p>\n<pre>\n$user = new User();\n$user->set(\'name\', $data[\'name\']);\n$user->set(surname\', $data[\'surname\']);\n$user->set(\'age\', $data[\'age\']);\n$user->save();\n</pre>\n<p></code></p>\n<p><strong>načtení konkrétního uživatele z tabulky:</strong>\n<code></p>\n<pre>\n$user = new User([\n    \'email\' => $data[\'email\'],\n    \'password\' => $data[\'password\'],\n]);\nreturn $user->getData();\n</pre>\n<p></code></p>',
        0, 0, 0),
       (9, 'Výběr barev webové stránky', 'vyber-barev-webove-stranky', '2020-10-23',
        '<p>Zkoušeli jste někdy různé barevné kombinace textu a jeho pozadí a jejich čitelnost?\n<br>\nMně hodně pomohlo aplikace, kterou jsem si vyrobil. Zde si nastavuji odstín, sytost a světlost pozadí textu a zkouším, jak dobře se mi text čte, když je bílý nebo černý. A podle toho si vyberu. Výslednou barevnou kombinaci (HSL) si uložím do CSS a použiji ji při tvoření barevného &quot;téma&quot; webových stránek.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/color_combiner/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/text_color_combiner\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (10, 'Úprava šablony na míru', 'uprava-sablony-na-miru', '2020-10-25',
        '<h2>Proč se vyplatí investovat do úpravy šablony na míru?</h2>\n<p>Nejlépe fungují produkty, které jsou dělané na míru. Oblek, který máte šitý přímo pro sebe padne jako ulitý. Při nákupu konfekce jste nuceni občas udělat tu a tam kompromis. Ale to, že vám krejčí nešije celý oblek neznamená, že vám nemůže pomoci s pár detaily.\n<br>\n<strong>Použitím webové šablony razantně klesají náklady na výrobu webových stránek. To je fakt.</strong>\n<br>\nJejí tvůrce ale nemůže vyladit to, co tam přidáte a vložíte vy sami. A po naplnění šablony reálným obsahem je vhodné vše znovu projít a udělat případné úpravy. Stačí několik málo úpravy a uživatelův dojem bude mnohem lepší.\n<br></p>\n<h3>Na co je potřeba si dát u šablon pozor?</h3>\n<ul>\n<li>Aby výsledný kontrast nebyl příliš nízký ani vysoký\n<br>\nTím zaručíme uživatelům optimální čitelnost textů a viditelnost ovládacích prvků (tlačítka, zaškrtávátka, prvky kontaktního formuláře)</li>\n<li>Vhodné umístění klíčových informací</li>\n<li>Globální styly pro písmo a barvy</li>\n<li>Celkové sladění tématu šablony s oborem, kterému se web věnuje</li>\n</ul>\n<p>A zde pár ukázek, jak drobné úpravy zvyšují čitelnost nebo viditelnost a tím i celkovou použitelnost:</p>\n<p><strong>Zvýraznění ovládacího prvku formuláře, zaoblení hran:</strong>\n<img src=\"formular_original.png\" alt=\"\" />\n<img src=\"formular_upraveno.png\" alt=\"\" /></p>\n<p><strong>Zvýraznění navigačních odkazů a zlepšení čitelnosti tel. kontaktu</strong>\n<img src=\"hlavicka_original.png\" alt=\"\" />\n<img src=\"hlavicka_upraveno.png\" alt=\"\" /></p>\n<p><strong>Zlepšení přehlednosti kontaktních údajů v patičce</strong>\n<img src=\"paticka_original.png\" alt=\"\" />\n<img src=\"paticka_upraveno.png\" alt=\"\" /></p>\n<p><strong>Zlepšení čitelnosti textu odkazů</strong>\n<img src=\"profil_original.png\" alt=\"\" />\n<img src=\"profil_upraveno.png\" alt=\"\" /></p>\n<p><strong>Zmírnění jasu pozadí a použití tmavší barvy textu referencí</strong>\n<img src=\"reference_original.png\" alt=\"\" />\n<img src=\"reference_upraveno.png\" alt=\"\" /></p>',
        0, 0, 0),
       (11, 'Termíny a jejich dodržování', 'terminy-a-jejich-dodrzovani', '2020-10-23',
        '<p>Stává se vám, že si myslíte, že na nějaký úkol máte dost času a pak ten čas něja rychle uplyne? Termíny se někdy přiblíží rychleji, než se zdá.\nVytvořil jsem si proto jednoduchou aplikaci, kde si vyberu termín a vidím přesně, kolik času (dnů, hodin, minut) mi ještě do termínu zbývá.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/countdown\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/custom_countdown\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (12, 'Testování aplikace', 'testovani-aplikace', '2020-12-09',
        '<p>Při testování nestačí jen vložit do vstupu funkcí to, co víme, že na vstupu očekáváme. Správné testování zahrnuje vložení špatného typu vstupu nebo nesprávné hodnoty. Program se nesmí rozsypat jen protože nedostane to, co chce. Jistě že nebude fungovat správně s nesprávným vstupem. Ale nesmí se rozsypat jako domeček z karet.\n<br>\nAž budete příště testovat svoji aplikaci, zkuste ji vědomě spustit způsobem, který není správnou volbou. Prázdná hodnota, žádná hodnota, nula, číslo jako string, boolean atd.</p>',
        0, 0, 0),
       (13, 'Tvorba css jmen metodou BEM', 'tvorba-css-jmen-metodou-bem', '2020-11-07',
        '<p>Metoda BEM (Blok, Element, Modifikátor) slouží k organizaci stylopisu .css pro tvorbu webových stránek.\n<br>\nDobrou alternativou jsou i:</p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/objektove-orientovane-css\">OOCSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/skalovatelna-a-modularni-architektura-css\">SMACSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/udrzitelnost-rustu-css-pomoci-stupnovane-specificity\">ITCSS</a>\n<br>\n<br></p>\n<table>\n<thead>\n<tr>\n<th>Typ třídy</th>\n<th>Způsob pojmenovávání</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#blok\">Blok</a></td>\n<td><code>.block</code></td>\n</tr>\n<tr>\n<td><a href=\"#element\">Element</a></td>\n<td><code>.block__element</code></td>\n</tr>\n<tr>\n<td><a href=\"#modifikator\">Modifikátor</a></td>\n<td><code>.block--modifier</code></td>\n</tr>\n<tr>\n<td><a href=\"#modifikator-elementu\">Modifikátor elementu</a></td>\n<td><code>.block__element--modifier</code></td>\n</tr>\n</tbody>\n</table>\n<p>Jak to funguje v praxi.\n<br>\nVytvořím nezávislou, přepoužitelnou komponentu, např. produktovou kartu. Jako první označím celý blok například <strong>.product-card</strong>\n<br>\nTu rozdělím na několik dílů, podle obsahu, který v nich bude. Vzniknou 3 elementy nesoucí jméno bloku a jméno elementu / části oddělené dvěma podtržítky: <strong>.product-card__header</strong>, <strong>.product-card__body</strong>, <strong>.product-card__footer</strong>\n<br>\nPokud budu chtít modifikovat hlavní blok, použiji naopak dvě pomlčky: <strong>.product-card--animated</strong>\n<br>\nK modifikaci elementu přistupuji stejně: <strong>.product-card__body--discounted</strong></p>',
        0, 0, 0),
       (14, 'Udržitelnost růstu CSS pomocí stupňované specificity',
        'udrzitelnost-rustu-css-pomoci-stupnovane-specificity', '2020-11-07',
        '<p>Jedna metodika na organizaci CSS, která se v něčem podobá a v něčem se liší od ostatních je ITCSS. Označení je zkratka pro Inverted Triangle. Tedy otočený trojúhelník.\n<br>\nJaký trojúhelník a proč otočený?\n<br>\nJde především o <strong>specificitu</strong> selektorů. Specificita má totiž určená pravidla. A její index se dá spočítat podle toho, jak je prvek, který stylujeme zacílen. Prioritu v prohlížeči může mít pravidlo, které je určené jako <strong>poslední</strong>, nebo to, které je <strong>nejvíce specifické</strong>. Pokud je ponecháno místo, aplikuje se i <strong>dědičnost</strong>. Právě proto je důležité, jak v CSS prvky na stránce popisujeme.\n<br>\nJe to tedy něco jako poker. Určitá kombinace karet má vyšší hodnotu než jiná.\n<br>\nNa začátku souboru je tedy ideální umístit globální styly. A v každé další vrstvě nebo sekci umisťovat více a více specifické selektory.\n<br>\nPodobným způsobem funguje i lokalizace na mapě. Posloupnost je asi taková: světadíl, stát, kraj, město, městská část, ulice, číslo budovy. A pro doručení dopisu třeba ještě patro, číslo bytu, jméno na zvonku apod.\n<br>\nV praxi lze CSS rozdělit na moduly a v určitém pořadí je načíst. Například: base.css, typography.css, layout.css , elements.css, components.css, utilities.css apod.\n<br>\nITCSS navrhuje 7 vrstev dle specificity:</p>\n<ol>\n<li>Settings - nastavení, proměnné [$primary-color]</li>\n<li>Tools - funkce (preprocesory) [@mixin]</li>\n<li>Generic - nespecifické styly [body, main, nav, header]</li>\n<li>Elements - základní styly HTML prvků [h1, p, ul]</li>\n<li>Objects - layouty [.container]</li>\n<li>Components - UI komponenty [.card, .info-bar]</li>\n<li>Utilities - modifikátory, které mění ideálně jen 1 vlastnost [.center, .bold]</li>\n</ol>\n<svg width=\"382\" height=\"332\" viewBox=\"0 0 191 166\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M106.517 149.981C106.589 150.247 106.863 150.406 107.129 150.334L111.476 149.169C111.743 149.098 111.901 148.824 111.83 148.557C111.758 148.29 111.484 148.132 111.217 148.204L107.354 149.239L106.318 145.375C106.247 145.108 105.973 144.95 105.706 145.022C105.439 145.093 105.281 145.367 105.352 145.634L106.517 149.981ZM170.567 38.75L106.567 149.601L107.433 150.101L171.433 39.25L170.567 38.75Z\" fill=\"black\"/>\n<path d=\"M114.67 159.623L115.087 161.068L117.584 162.51L117.021 163.484L109.633 159.218L110.196 158.244L113.849 160.354L112.091 154.961L112.771 153.784L114.355 158.575L120.291 157.821L119.617 158.988L114.67 159.623ZM120.515 149.453C121.239 149.871 121.801 150.358 122.202 150.914C122.599 151.468 122.811 152.05 122.837 152.661C122.864 153.271 122.705 153.874 122.361 154.47C122.025 155.052 121.585 155.485 121.041 155.771C120.494 156.055 119.884 156.17 119.212 156.116C118.538 156.056 117.851 155.828 117.15 155.433L116.617 155.125C115.907 154.715 115.351 154.229 114.949 153.668C114.547 153.106 114.332 152.518 114.304 151.902C114.275 151.28 114.428 150.679 114.764 150.097C115.106 149.505 115.55 149.067 116.098 148.783C116.644 148.494 117.259 148.385 117.944 148.456C118.626 148.525 119.328 148.767 120.048 149.183L120.515 149.453ZM119.478 150.146C118.602 149.641 117.829 149.429 117.159 149.511C116.486 149.591 115.967 149.948 115.601 150.58C115.246 151.196 115.201 151.817 115.466 152.444C115.73 153.065 116.275 153.621 117.101 154.112L117.644 154.425C118.493 154.916 119.264 155.124 119.956 155.05C120.647 154.971 121.173 154.618 121.534 153.992C121.897 153.363 121.95 152.744 121.693 152.135C121.432 151.525 120.876 150.967 120.026 150.463L119.478 150.146ZM128.093 144.308L127.527 145.287L119.686 145.72L125.38 149.007L124.814 149.986L117.426 145.721L117.992 144.741L125.864 144.313L120.145 141.012L120.704 140.042L128.093 144.308ZM126.74 138.717L127.158 140.162L129.654 141.603L129.092 142.578L121.703 138.312L122.266 137.338L125.919 139.447L124.161 134.055L124.841 132.877L126.425 137.669L132.361 136.915L131.687 138.082L126.74 138.717ZM131.429 131.627L130.427 133.362L133.416 135.088L132.85 136.067L125.462 131.802L126.874 129.356C127.355 128.524 127.913 127.994 128.55 127.766C129.189 127.535 129.87 127.628 130.594 128.046C131.054 128.312 131.383 128.668 131.58 129.116C131.779 129.56 131.835 130.053 131.748 130.593L135.886 130.669L135.947 130.704L135.344 131.749L131.429 131.627ZM129.63 132.902L130.495 131.405C130.774 130.922 130.871 130.465 130.784 130.037C130.7 129.605 130.448 129.268 130.029 129.025C129.572 128.762 129.143 128.697 128.741 128.83C128.341 128.96 127.991 129.281 127.691 129.793L126.829 131.285L129.63 132.902ZM135.547 123.51L133.698 126.712L136.317 128.224L138.464 124.505L139.261 124.965L136.551 129.658L129.162 125.393L131.843 120.75L132.645 121.213L130.527 124.881L132.901 126.252L134.75 123.05L135.547 123.51ZM128.707 121.47L129.364 120.333L130.07 122.554L129.634 123.31L128.707 121.47ZM136.38 114.743L135.009 117.118L141.596 120.92L141.036 121.889L134.45 118.087L133.081 120.456L132.28 119.994L135.578 114.28L136.38 114.743ZM146.878 111.771L146.312 112.751L138.472 113.183L144.165 116.47L143.6 117.449L136.211 113.184L136.777 112.204L144.649 111.777L138.93 108.475L139.49 107.506L146.878 111.771ZM147.702 102.362C148.426 102.78 148.989 103.267 149.389 103.823C149.787 104.378 149.998 104.96 150.025 105.571C150.051 106.181 149.892 106.784 149.549 107.38C149.213 107.961 148.773 108.395 148.229 108.681C147.682 108.965 147.072 109.08 146.399 109.025C145.726 108.966 145.039 108.738 144.338 108.343L143.805 108.035C143.095 107.625 142.538 107.139 142.136 106.578C141.734 106.016 141.519 105.428 141.491 104.812C141.462 104.19 141.616 103.589 141.952 103.007C142.293 102.415 142.738 101.977 143.285 101.693C143.831 101.404 144.447 101.295 145.132 101.365C145.814 101.434 146.515 101.677 147.236 102.093L147.702 102.362ZM146.666 103.056C145.79 102.55 145.017 102.339 144.347 102.421C143.673 102.501 143.154 102.858 142.789 103.49C142.433 104.106 142.388 104.727 142.653 105.354C142.917 105.975 143.462 106.531 144.288 107.022L144.831 107.335C145.68 107.826 146.451 108.034 147.143 107.96C147.834 107.88 148.36 107.528 148.722 106.902C149.085 106.273 149.138 105.654 148.88 105.045C148.619 104.434 148.064 103.877 147.214 103.373L146.666 103.056ZM149.965 98.8179C149.243 99.5148 148.597 99.9538 148.028 100.135C147.457 100.311 146.915 100.25 146.401 99.9532C145.819 99.6173 145.472 99.1082 145.361 98.426C145.248 97.7384 145.407 97.0225 145.836 96.2783C146.129 95.7709 146.488 95.3759 146.913 95.0934C147.34 94.8075 147.788 94.6559 148.258 94.6386C148.73 94.6179 149.171 94.7257 149.58 94.9621L149.015 95.9414C148.568 95.6836 148.136 95.6235 147.718 95.7612C147.297 95.8969 146.937 96.2236 146.638 96.7412C146.361 97.2216 146.25 97.6586 146.307 98.0523C146.363 98.4406 146.578 98.7432 146.954 98.96C147.255 99.1338 147.584 99.1544 147.94 99.0218C148.295 98.8838 148.735 98.5585 149.261 98.0458C149.789 97.5297 150.257 97.1597 150.666 96.9357C151.074 96.7064 151.464 96.589 151.837 96.5834C152.212 96.5744 152.588 96.6783 152.963 96.8951C153.562 97.2408 153.908 97.7515 154 98.4274C154.089 99.1012 153.908 99.8289 153.457 100.61C153.164 101.118 152.794 101.536 152.347 101.864C151.897 102.191 151.434 102.376 150.957 102.421C150.482 102.463 150.029 102.359 149.6 102.111L150.165 101.132C150.612 101.39 151.06 101.43 151.51 101.252C151.958 101.069 152.342 100.702 152.66 100.15C152.957 99.6362 153.08 99.1815 153.028 98.7864C152.977 98.3913 152.77 98.0893 152.408 97.8803C152.046 97.6713 151.694 97.637 151.351 97.7775C151.005 97.916 150.543 98.2627 149.965 98.8179ZM151.925 87.8181L150.554 90.1929L157.141 93.9957L156.581 94.9649L149.994 91.1622L148.626 93.5319L147.825 93.069L151.123 87.3553L151.925 87.8181ZM158.186 85.5058L161.078 87.1757L160.516 88.15L153.127 83.8844L154.7 81.1595C155.167 80.3509 155.739 79.8375 156.415 79.6191C157.094 79.3973 157.773 79.4827 158.453 79.8752C159.17 80.2893 159.593 80.8336 159.722 81.5081C159.85 82.1773 159.673 82.9297 159.191 83.7653L158.186 85.5058ZM157.389 85.0458L158.4 83.2952C158.7 82.7742 158.809 82.3047 158.726 81.8867C158.639 81.4667 158.364 81.1229 157.9 80.8554C157.461 80.6015 157.029 80.537 156.605 80.6621C156.181 80.7871 155.824 81.0886 155.534 81.5665L154.492 83.373L157.389 85.0458ZM162.876 77.1586L161.874 78.8941L164.863 80.6196L164.298 81.599L156.909 77.3334L158.322 74.8875C158.802 74.0553 159.361 73.5253 159.997 73.2975C160.636 73.0664 161.317 73.1598 162.041 73.5777C162.501 73.8434 162.83 74.2 163.027 74.6476C163.226 75.0918 163.282 75.5843 163.196 76.1251L167.334 76.2002L167.394 76.2354L166.791 77.2807L162.876 77.1586ZM161.078 78.4341L161.942 76.9372C162.221 76.4534 162.318 75.9972 162.232 75.5685C162.147 75.1364 161.895 74.7993 161.476 74.5571C161.019 74.2934 160.59 74.2283 160.188 74.3617C159.788 74.4917 159.438 74.8128 159.138 75.3251L158.277 76.8169L161.078 78.4341ZM168.425 69.997L166.638 73.0924L168.165 74.9008L167.585 75.9056L161.825 68.8186L162.318 67.9661L171.338 69.4053L170.761 70.4049L168.425 69.997ZM166.006 72.3352L167.456 69.8234L163.274 69.0867L166.006 72.3352ZM171.772 65.6643L166.897 60.0349L167.512 58.9692L173.318 65.975L172.82 66.8377L163.853 65.3071L164.465 64.2466L171.772 65.6643ZM176.078 61.195L175.516 62.1692L168.127 57.9036L168.69 56.9293L176.078 61.195ZM177.109 59.4088L169.721 55.1432L170.925 53.0576C171.296 52.4148 171.766 51.9285 172.336 51.5987C172.905 51.2689 173.529 51.1217 174.208 51.1572C174.888 51.1893 175.57 51.3999 176.251 51.7891L176.723 52.0616C177.42 52.4639 177.953 52.9518 178.321 53.5251C178.691 54.0951 178.872 54.7115 178.864 55.3743C178.857 56.0337 178.666 56.6969 178.29 57.3638L177.109 59.4088ZM171.085 54.6318L176.875 57.9746L177.467 56.9495C177.9 56.1985 178.004 55.4802 177.777 54.7946C177.553 54.1056 177.009 53.512 176.146 53.014L175.715 52.765C174.876 52.2806 174.111 52.1025 173.419 52.2307C172.725 52.3536 172.166 52.7751 171.742 53.4951L171.085 54.6318ZM180.816 51.1495L182.837 47.6482L183.634 48.1082L181.047 52.5888L173.659 48.3232L174.224 47.3439L180.816 51.1495ZM184.761 41.7023L182.974 44.7977L184.501 46.6062L183.921 47.6109L178.161 40.5239L178.654 39.6714L187.674 41.1106L187.097 42.1103L184.761 41.7023ZM182.342 44.0405L183.792 41.5287L179.61 40.792L182.342 44.0405Z\" fill=\"black\"/>\n<path d=\"M7.6433 41.6331C7.40106 40.6589 7.34381 39.88 7.47155 39.2966C7.60462 38.7146 7.92826 38.2751 8.44246 37.9782C9.02432 37.6423 9.63849 37.5967 10.285 37.8414C10.9368 38.0875 11.4775 38.5827 11.9072 39.327C12.2002 39.8344 12.3628 40.3427 12.3951 40.8517C12.4294 41.3642 12.3365 41.8283 12.1164 42.244C11.8983 42.6631 11.5846 42.9909 11.1752 43.2272L10.6098 42.2478C11.0564 41.99 11.3245 41.6458 11.4141 41.2151C11.5072 40.7825 11.4043 40.3074 11.1054 39.7899C10.8281 39.3095 10.5047 38.9955 10.1354 38.8479C9.77132 38.7018 9.40155 38.7371 9.02605 38.9539C8.72497 39.1277 8.5428 39.402 8.47954 39.7768C8.42162 40.1531 8.48316 40.6972 8.66414 41.4091C8.84708 42.1244 8.93329 42.7151 8.92277 43.1812C8.91758 43.6488 8.82414 44.0456 8.64245 44.3715C8.46271 44.7008 8.18508 44.9738 7.80958 45.1906C7.2108 45.5363 6.59566 45.5803 5.96416 45.3224C5.33604 45.0626 4.7964 44.542 4.34522 43.7605C4.05226 43.2531 3.87523 42.7238 3.81415 42.1727C3.75645 41.6196 3.82741 41.1254 4.02703 40.6899C4.22861 40.2577 4.54421 39.9177 4.97384 39.6696L5.53927 40.649C5.09272 40.9068 4.83393 41.275 4.7629 41.7535C4.69721 42.2335 4.82354 42.7491 5.1419 43.3006C5.43878 43.8148 5.77118 44.1483 6.13913 44.3012C6.50707 44.4542 6.87203 44.4261 7.234 44.2172C7.59597 44.0082 7.80182 43.7202 7.85155 43.3532C7.90465 42.9842 7.83524 42.4109 7.6433 41.6331ZM10.1106 46.8324L7.2182 48.5023L6.6557 47.528L14.044 43.2624L15.6172 45.9873C16.084 46.7958 16.2429 47.5476 16.0938 48.2425C15.9468 48.9409 15.5332 49.4864 14.8533 49.8789C14.1361 50.293 13.4531 50.3874 12.8043 50.1621C12.1608 49.9382 11.5979 49.4084 11.1155 48.5729L10.1106 46.8324ZM10.9073 46.3724L11.918 48.1231C12.2188 48.644 12.571 48.9729 12.9748 49.1097C13.3819 49.2445 13.8172 49.1781 14.2806 48.9105C14.7204 48.6566 14.9921 48.3148 15.0959 47.8851C15.1996 47.4553 15.1168 46.9956 14.8477 46.506L13.8047 44.6995L10.9073 46.3724ZM16.267 56.2886L14.4184 53.0867L11.8 54.5984L13.9475 58.3179L13.1508 58.7779L10.4409 54.0841L17.8291 49.8185L20.5098 54.4615L19.708 54.9244L17.5899 51.2556L15.2151 52.6267L17.0637 55.8286L16.267 56.2886ZM19.3331 64.0718C18.4989 64.4316 17.728 64.491 17.0205 64.25C16.3184 64.0103 15.7349 63.488 15.27 62.6828C14.7661 61.81 14.6747 60.9291 14.9959 60.0401C15.319 59.1544 16.0049 58.4088 17.0536 57.8033L17.764 57.3932C18.4507 56.9967 19.1249 56.7698 19.7865 56.7126C20.4501 56.6588 21.0504 56.7768 21.5876 57.0665C22.1281 57.3544 22.5693 57.7943 22.9111 58.3863C23.3642 59.1711 23.5076 59.9273 23.3413 60.6548C23.1783 61.3804 22.7319 62.0057 22.0022 62.5308L21.4367 61.5514C21.9765 61.127 22.2963 60.6965 22.3962 60.26C22.4979 59.8269 22.4023 59.3566 22.1093 58.8492C21.75 58.2267 21.2377 57.8707 20.5725 57.7811C19.9093 57.6949 19.1532 57.8969 18.3041 58.3872L17.5886 58.8003C16.7868 59.2632 16.2458 59.7988 15.9656 60.4071C15.6853 61.0155 15.719 61.6207 16.0667 62.2229C16.3792 62.7641 16.7402 63.1082 17.1498 63.2552C17.5648 63.4035 18.104 63.3493 18.7676 63.0924L19.3331 64.0718ZM18.3627 67.8052L17.8002 66.8309L25.1885 62.5653L25.751 63.5395L18.3627 67.8052ZM25.0093 71.7823L23.2193 68.6818L19.9565 70.5656L19.394 69.5914L26.7823 65.3257L29.4248 69.9028L28.6231 70.3657L26.543 66.7629L24.016 68.2219L25.806 71.3223L25.0093 71.7823ZM23.3139 76.3809L22.7514 75.4066L30.1397 71.141L30.7022 72.1152L23.3139 76.3809ZM29.8272 82.2482C28.993 82.608 28.2222 82.6674 27.5147 82.4263C26.8125 82.1867 26.229 81.6644 25.7642 80.8592C25.2603 79.9864 25.1689 79.1055 25.49 78.2164C25.8131 77.3308 26.499 76.5852 27.5477 75.9797L28.2582 75.5696C28.9449 75.1731 29.6191 74.9462 30.2806 74.889C30.9442 74.8352 31.5445 74.9532 32.0817 75.2429C32.6223 75.5308 33.0634 75.9707 33.4052 76.5627C33.8584 77.3475 34.0017 78.1037 33.8354 78.8312C33.6724 79.5568 33.2261 80.1821 32.4963 80.7071L31.9309 79.7278C32.4707 79.3034 32.7905 78.8729 32.8903 78.4364C32.9921 78.0033 32.8964 77.533 32.6035 77.0256C32.2441 76.4031 31.7318 76.0471 31.0667 75.9575C30.4035 75.8713 29.6473 76.0733 28.7982 76.5636L28.0827 76.9767C27.281 77.4395 26.74 77.9752 26.4597 78.5835C26.1795 79.1919 26.2132 79.7971 26.5608 80.3993C26.8733 80.9405 27.2344 81.2846 27.644 81.4315C28.0589 81.5799 28.5982 81.5257 29.2618 81.2688L29.8272 82.2482ZM28.8569 85.9816L28.2944 85.0073L35.6826 80.7417L36.2451 81.7159L28.8569 85.9816ZM39.334 88.9176L37.9629 86.5428L31.3764 90.3455L30.8168 89.3763L37.4034 85.5736L36.0352 83.2038L36.8369 82.741L40.1358 88.4547L39.334 88.9176ZM37.4297 96.3769L35.6425 93.2816L33.3129 93.6997L32.7328 92.6949L41.75 91.2507L42.2422 92.1032L36.4858 99.1952L35.9086 98.1956L37.4297 96.3769ZM36.6142 93.113L38.0644 95.6248L40.7935 92.3713L36.6142 93.113ZM43.0984 103.043C42.8561 102.069 42.7989 101.29 42.9266 100.707C43.0597 100.125 43.3833 99.6851 43.8975 99.3882C44.4794 99.0523 45.0936 99.0067 45.74 99.2514C46.3918 99.4975 46.9326 99.9927 47.3623 100.737C47.6552 101.244 47.8179 101.753 47.8502 102.262C47.8844 102.774 47.7915 103.238 47.5715 103.654C47.3534 104.073 47.0397 104.401 46.6303 104.637L46.0649 103.658C46.5114 103.4 46.7795 103.056 46.8692 102.625C46.9622 102.193 46.8593 101.717 46.5605 101.2C46.2832 100.719 45.9598 100.406 45.5904 100.258C45.2264 100.112 44.8566 100.147 44.4811 100.364C44.18 100.538 43.9979 100.812 43.9346 101.187C43.8767 101.563 43.9382 102.107 44.1192 102.819C44.3022 103.534 44.3884 104.125 44.3778 104.591C44.3727 105.059 44.2792 105.456 44.0975 105.781C43.9178 106.111 43.6402 106.384 43.2647 106.601C42.6659 106.946 42.0507 106.99 41.4192 106.732C40.7911 106.473 40.2515 105.952 39.8003 105.171C39.5073 104.663 39.3303 104.134 39.2692 103.583C39.2115 103.03 39.2825 102.535 39.4821 102.1C39.6837 101.668 39.9993 101.328 40.4289 101.08L40.9943 102.059C40.5478 102.317 40.289 102.685 40.218 103.163C40.1523 103.643 40.2786 104.159 40.597 104.711C40.8939 105.225 41.2263 105.558 41.5942 105.711C41.9621 105.864 42.3271 105.836 42.6891 105.627C43.051 105.418 43.2569 105.13 43.3066 104.763C43.3597 104.394 43.2903 103.821 43.0984 103.043ZM47.937 111.143L46.0883 107.941L43.4699 109.452L45.6174 113.172L44.8207 113.632L42.1108 108.938L49.4991 104.672L52.1797 109.315L51.378 109.778L49.2598 106.11L46.885 107.481L48.7336 110.683L47.937 111.143ZM46.883 115.364L48.9045 118.865L48.1078 119.325L45.5209 114.845L52.9092 110.579L53.4746 111.558L46.883 115.364ZM54.5756 122.641L52.727 119.439L50.1086 120.951L52.2561 124.67L51.4594 125.13L48.7494 120.437L56.1377 116.171L58.8184 120.814L58.0166 121.277L55.8985 117.608L53.5237 118.979L55.3723 122.181L54.5756 122.641ZM56.6789 126.237L55.2187 125.876L52.7221 127.317L52.1596 126.343L59.5479 122.077L60.1104 123.052L56.4568 125.161L62.0059 126.335L62.6856 127.512L57.744 126.488L55.4291 132.006L54.7553 130.839L56.6789 126.237ZM65.4551 134.161L64.084 131.786L57.4975 135.589L56.9379 134.619L63.5244 130.817L62.1563 128.447L62.958 127.984L66.2569 133.698L65.4551 134.161ZM66.1563 142.606C65.4323 143.024 64.7294 143.267 64.0475 143.336C63.369 143.403 62.7588 143.295 62.2168 143.013C61.6748 142.73 61.2319 142.291 60.8882 141.696C60.5523 141.114 60.3965 140.516 60.4209 139.902C60.4487 139.286 60.6542 138.701 61.0374 138.146C61.4259 137.592 61.9667 137.111 62.6596 136.702L63.1924 136.394C63.9028 135.984 64.6017 135.745 65.2889 135.677C65.9761 135.61 66.5934 135.718 67.1407 136.002C67.6934 136.287 68.1376 136.721 68.4736 137.303C68.8154 137.895 68.9724 138.499 68.9446 139.115C68.9222 139.732 68.7089 140.32 68.3049 140.878C67.9043 141.434 67.3437 141.92 66.6231 142.336L66.1563 142.606ZM66.0737 141.361C66.9499 140.855 67.5198 140.291 67.7835 139.67C68.0506 139.047 68.0015 138.419 67.6363 137.786C67.2808 137.171 66.7655 136.821 66.0902 136.737C65.4202 136.655 64.6662 136.849 63.8281 137.319L63.2852 137.633C62.4361 138.123 61.8705 138.686 61.5884 139.323C61.3117 139.961 61.354 140.592 61.7153 141.218C62.0786 141.848 62.5882 142.203 63.2441 142.284C63.9034 142.364 64.6639 142.161 65.5256 141.677L66.0737 141.361ZM68.0976 147.046L67.0957 145.311L64.1069 147.036L63.5414 146.057L70.9297 141.791L72.3418 144.237C72.8223 145.069 73.002 145.818 72.8809 146.483C72.7618 147.152 72.3403 147.695 71.6163 148.113C71.1562 148.379 70.6831 148.485 70.1969 148.432C69.7126 148.383 69.258 148.185 68.833 147.839L66.699 151.385L66.6381 151.421L66.0346 150.375L68.0976 147.046ZM67.8923 144.851L68.7566 146.348C69.0359 146.832 69.3827 147.143 69.7971 147.283C70.2135 147.426 70.6314 147.376 71.0509 147.134C71.5076 146.87 71.7786 146.531 71.864 146.117C71.9513 145.705 71.8482 145.242 71.5547 144.725L70.6934 143.234L67.8923 144.851ZM77.6328 153.402L72.6092 156.302C71.9104 156.701 71.2134 156.81 70.5183 156.63C69.8251 156.452 69.2366 156.007 68.7528 155.294L68.5933 155.041C68.1265 154.233 67.9726 153.462 68.1317 152.73C68.2907 151.998 68.7505 151.408 69.5112 150.959L74.5449 148.053L75.1016 149.017L70.0983 151.906C69.5638 152.215 69.2326 152.602 69.1049 153.068C68.9805 153.532 69.0755 154.037 69.3899 154.581C69.7083 155.133 70.0986 155.469 70.5609 155.59C71.0251 155.714 71.5245 155.622 72.059 155.314L77.0674 152.422L77.6328 153.402Z\" fill=\"black\"/>\n<path d=\"M79.1254 148.163C79.3921 148.235 79.6663 148.077 79.7378 147.81L80.9025 143.463C80.9739 143.196 80.8156 142.922 80.5489 142.851C80.2822 142.779 80.008 142.938 79.9365 143.204L78.9013 147.068L75.0376 146.033C74.7708 145.961 74.4967 146.12 74.4252 146.386C74.3537 146.653 74.512 146.927 74.7787 146.999L79.1254 148.163ZM14.8218 37.0792L78.8218 147.93L79.6878 147.43L15.6878 36.5792L14.8218 37.0792Z\" fill=\"black\"/>\n<path d=\"M156.354 22.3535C156.549 22.1582 156.549 21.8417 156.354 21.6464L153.172 18.4644C152.976 18.2692 152.66 18.2692 152.464 18.4644C152.269 18.6597 152.269 18.9763 152.464 19.1715L155.293 22L152.464 24.8284C152.269 25.0236 152.269 25.3402 152.464 25.5355C152.66 25.7308 152.976 25.7308 153.172 25.5355L156.354 22.3535ZM28 22.5L156 22.5L156 21.5L28 21.5L28 22.5Z\" fill=\"black\"/>\n<path d=\"M72.9902 16V7.46875H75.3984C76.1406 7.46875 76.7969 7.63281 77.3672 7.96094C77.9375 8.28906 78.377 8.75586 78.6855 9.36133C78.998 9.9668 79.1562 10.6621 79.1602 11.4473V11.9922C79.1602 12.7969 79.0039 13.502 78.6914 14.1074C78.3828 14.7129 77.9395 15.1777 77.3613 15.502C76.7871 15.8262 76.1172 15.9922 75.3516 16H72.9902ZM74.1152 8.39453V15.0801H75.2988C76.166 15.0801 76.8398 14.8105 77.3203 14.2715C77.8047 13.7324 78.0469 12.9648 78.0469 11.9688V11.4707C78.0469 10.502 77.8184 9.75 77.3613 9.21484C76.9082 8.67578 76.2637 8.40234 75.4277 8.39453H74.1152ZM87.4277 12.0098C87.4277 12.8457 87.2871 13.5762 87.0059 14.2012C86.7246 14.8223 86.3262 15.2969 85.8105 15.625C85.2949 15.9531 84.6934 16.1172 84.0059 16.1172C83.334 16.1172 82.7383 15.9531 82.2188 15.625C81.6992 15.293 81.2949 14.8223 81.0059 14.2129C80.7207 13.5996 80.5742 12.8906 80.5664 12.0859V11.4707C80.5664 10.6504 80.709 9.92578 80.9941 9.29688C81.2793 8.66797 81.6816 8.1875 82.2012 7.85547C82.7246 7.51953 83.3223 7.35156 83.9941 7.35156C84.6777 7.35156 85.2793 7.51758 85.7988 7.84961C86.3223 8.17773 86.7246 8.65625 87.0059 9.28516C87.2871 9.91016 87.4277 10.6387 87.4277 11.4707V12.0098ZM86.3086 11.459C86.3086 10.4473 86.1055 9.67188 85.6992 9.13281C85.293 8.58984 84.7246 8.31836 83.9941 8.31836C83.2832 8.31836 82.7227 8.58984 82.3125 9.13281C81.9062 9.67188 81.6973 10.4219 81.6855 11.3828V12.0098C81.6855 12.9902 81.8906 13.7617 82.3008 14.3242C82.7148 14.8828 83.2832 15.1621 84.0059 15.1621C84.7324 15.1621 85.2949 14.8984 85.6934 14.3711C86.0918 13.8398 86.2969 13.0801 86.3086 12.0918V11.459ZM91.6289 12.1973C90.6641 11.9199 89.9609 11.5801 89.5195 11.1777C89.082 10.7715 88.8633 10.2715 88.8633 9.67773C88.8633 9.00586 89.1309 8.45117 89.666 8.01367C90.2051 7.57227 90.9043 7.35156 91.7637 7.35156C92.3496 7.35156 92.8711 7.46484 93.3281 7.69141C93.7891 7.91797 94.1445 8.23047 94.3945 8.62891C94.6484 9.02734 94.7754 9.46289 94.7754 9.93555H93.6445C93.6445 9.41992 93.4805 9.01562 93.1523 8.72266C92.8242 8.42578 92.3613 8.27734 91.7637 8.27734C91.209 8.27734 90.7754 8.40039 90.4629 8.64648C90.1543 8.88867 90 9.22656 90 9.66016C90 10.0078 90.1465 10.3027 90.4395 10.5449C90.7363 10.7832 91.2383 11.002 91.9453 11.2012C92.6562 11.4004 93.2109 11.6211 93.6094 11.8633C94.0117 12.1016 94.3086 12.3809 94.5 12.7012C94.6953 13.0215 94.793 13.3984 94.793 13.832C94.793 14.5234 94.5234 15.0781 93.9844 15.4961C93.4453 15.9102 92.7246 16.1172 91.8223 16.1172C91.2363 16.1172 90.6895 16.0059 90.1816 15.7832C89.6738 15.5566 89.2812 15.248 89.0039 14.8574C88.7305 14.4668 88.5938 14.0234 88.5938 13.5273H89.7246C89.7246 14.043 89.9141 14.4512 90.293 14.752C90.6758 15.0488 91.1855 15.1973 91.8223 15.1973C92.416 15.1973 92.8711 15.0762 93.1875 14.834C93.5039 14.5918 93.6621 14.2617 93.6621 13.8438C93.6621 13.4258 93.5156 13.1035 93.2227 12.877C92.9297 12.6465 92.3984 12.4199 91.6289 12.1973ZM100.951 13.7734H97.377L96.5742 16H95.4141L98.6719 7.46875H99.6562L102.92 16H101.766L100.951 13.7734ZM97.7168 12.8477H100.617L99.1641 8.85742L97.7168 12.8477ZM110.625 16H109.494V12.0566H105.193V16H104.068V7.46875H105.193V11.1367H109.494V7.46875H110.625V16Z\" fill=\"black\"/>\n<mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"27\" y=\"37\" width=\"129\" height=\"113\">\n<path d=\"M91.5 150L27.8471 37.5L155.153 37.5L91.5 150Z\" fill=\"white\"/>\n</mask>\n<g mask=\"url(#mask0)\">\n<rect x=\"28\" y=\"38\" width=\"128\" height=\"16\" fill=\"#64B300\"/>\n<rect x=\"28\" y=\"54\" width=\"128\" height=\"16\" fill=\"#5BA300\"/>\n<rect x=\"28\" y=\"70\" width=\"128\" height=\"16\" fill=\"#539400\"/>\n<rect x=\"28\" y=\"86\" width=\"128\" height=\"16\" fill=\"#4A8500\"/>\n<rect x=\"28\" y=\"102\" width=\"128\" height=\"16\" fill=\"#427500\"/>\n<rect x=\"28\" y=\"118\" width=\"128\" height=\"16\" fill=\"#396600\"/>\n<rect x=\"28\" y=\"134\" width=\"128\" height=\"16\" fill=\"#305500\"/>\n</g>\n<path d=\"M25.6464 21.6464C25.4512 21.8417 25.4512 22.1583 25.6464 22.3536L28.8284 25.5355C29.0237 25.7308 29.3403 25.7308 29.5355 25.5355C29.7308 25.3403 29.7308 25.0237 29.5355 24.8284L26.7071 22L29.5355 19.1716C29.7308 18.9763 29.7308 18.6597 29.5355 18.4645C29.3403 18.2692 29.0237 18.2692 28.8284 18.4645L25.6464 21.6464ZM28 21.5H26V22.5H28V21.5Z\" fill=\"black\"/>\n</svg>\n<p><br></p>\n<h3>S novou organizací kódu je samozřejmě jednodušší začít na novém projektu nebo při jeho redesignu, než ho postupně za chodu dostávat do již existujícího webu či aplikace.</h3>\n<p>Dobrou alternativou jsou i:</p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/objektove-orientovane-css\">OOCSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/skalovatelna-a-modularni-architektura-css\">SMACSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/tvorba-css-jmen-metodou-bem\">BEMCSS</a></p>',
        0, 0, 0),
       (15, 'Soft skills vhodné pro programátora', 'soft-skills-vhodne-pro-programatora', '2021-01-13',
        '<p>Zákazník, který si objedná aplikaci, web nebo službu nevidí kód, který píšu ani kvalitu řešení, které jsem vymyslel a zrealizoval. Nepozná, jestli je napsaný čistě, srozumitelně a má li tedy dobré základy pro případné rozšiřování. Zákazník pozná pouze to, jak aplikace nebo web vypadá, jestli funguje a jak rychle. V druhé vlně si může poslechnout zpětnou vazbu uživatelů. Zákazník ocení hlavně ekonomický přínos a viditelné výsledky.</p>\n<h2>Co zákazník potřebuje</h2>\n<ul>\n<li>snížení nákladů ať už personálních nebo technických</li>\n<li>zvýšení obratu a řešení, které množství objednávek a dat ustojí</li>\n<li>spokojené uživatele, kteří se vracejí</li>\n</ul>\n<h2>Programátor musí</h2>\n<ul>\n<li>zajistit co největší přínos za co nejmenší náklady</li>\n<li>vyřešit problém, nejčastěji technického charakteru</li>\n</ul>\n<h2>Programátor potřebuje</h2>\n<ul>\n<li>informace o fungování firmy</li>\n<li>informace od koncového uživatele</li>\n<li>komplexní kontext (kdo co dělá, proč, jak a jak často)</li>\n</ul>\n<h2>Jak se vyhnout nedorozumění</h2>\n<ul>\n<li>po každém jednání sepsat srozumitelné shrnutí (kdo, co, do kdy)</li>\n<li>popsat každý odhad ceny (co je v ceně)</li>\n<li>zákazník buď odsouhlasí, upraví nebo se projedná znovu</li>\n<li>domýšlet detaily (chybové stavy, postup a datový tok, formuláře, datová struktura, vyhodnocování, testování)</li>\n<li>začít se skicou nebo drátěným modelem pro lepší představivost</li>\n</ul>\n<p>Na základě dostatečného množství pravdivých informací z analýzy lze přemýšlet o řešení. Výsledné řešení může o krok překonat původní očekávání. Například vyšší mírou automatizace, nižším časem stráveným obsluhou, větším množstvím užitečných funkcí. Ale také se může ukázat, že v daných podmínkách není řešení pomocí software vhodné a efektivní nebo finančně rentabilní.</p>\n<h2>Jak vyhodnotit projekt</h2>\n<ul>\n<li>je očekávání zákazníka realistické?</li>\n<li>jaké změny budou pro dosažení požadovaných výsledků potřeba?</li>\n<li>je cena vyplývající z odhadnuté časové náročnosti přijatelná?</li>\n<li>lze vyřešit problém ještě efektivněji a zabít tak více než jednu mouchu jednou ranou?</li>\n<li>rozdělit na fáze - analýza, vývoj, testing, refactoring</li>\n</ul>\n<h2>Zásady pro oboustrannou spokojenost</h2>\n<ul>\n<li>dodržovat termíny</li>\n<li>průběžně se informovat a předávat si zpětnou vazbu</li>\n<li>automatizovat testy na komplikované a kritické části aplikace</li>\n<li>rychle opravovat nedostatky zjištěné uživateli</li>\n</ul>\n<p>Oboustranná spokojenost vede k lepším výsledkům, budování vzájemné důvěry, snazší a efektivnější komunikaci v budoucnu. Shánění nového zákazníka i programátora na každý nový projekt stojí víc peněz, času a úsilí než vybudování a udržování současného pracovního vztahu.</p>',
        0, 0, 0),
       (16, 'SMACSS - Škálovatelná a modulární architektura CSS', 'skalovatelna-a-modularni-architektura-css',
        '2020-11-07',
        '<p>S nápadem přišel Jonathan Snook.\nHlavní myšlenka spočívá v oddělení CSS do několika kategorií.\n<br>\nMůže to vypadat třeba takto:\n<br></p>\n<table>\n    <thead>\n        <tr>\n            <th class=\"bold\">Základ</th>\n            <th>Přebírá z výchozích HTML tagů</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"bold\">Layout</td>\n            <td>.l-sidebar, .l-content</td>\n        </tr>\n        <tr>\n            <td class=\"bold\">Modul</td>\n            <td>základní neprefixované třídy</td>\n        </tr>\n        <tr>\n            <td class=\"bold\">Stav</td>\n            <td>.is-open, .is-selected</td>\n        </tr>\n        <tr>\n            <td class=\"bold\">Skin</td>\n            <td>popsán v samostaném souboru</td>\n        </tr>\n    </tbody>\n</table>\n<p>Dobrou alternativou jsou i:</p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/objektove-orientovane-css\">OOCSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/udrzitelnost-rustu-css-pomoci-stupnovane-specificity\">ITCSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/tvorba-css-jmen-metodou-bem\">BEMCSS</a></p>',
        0, 0, 0),
       (17, 'Snížení množství přenášených dat', 'snizeni-mnozstvi-prenasenych-dat', '2020-10-23',
        '<p>Všichni máme rádi rychlost, zejména když jde o techniku. Způsobů jak dosáhnout je několik.\n<br>\nČím méně dat se do webové stránky přenáší, tím má lepší odezvu a čas potřebný k načtení se zkracuje.\n<br>\nJak se dá snadno a rychle optimalizovat množství dat potřebných k chodu stránky nebo aplikace?\n<br>\nVelcí hráči jako je Google a Amazon vsází na rychlost a spolehlivost oproti krásnému designu. Pokud nejste zaměřeni na design (architekti, fotografové, grafici) možná vaše stránky mohou být jednodušší. Méně je někdy více.</p>\n<h2>Eliminace</h2>\n<p>Jednoduše odstraňte vše, co není potřebné k načtení. Množství dat se ihned zmenší a rychlost rázem poskočí minimálně o stupeň.\n<br>\nMůže to být font, který je sice hezký, ale ne tak důležitý, jako bleskově reagující stránka / aplikace. Nebo knihovna, která animuje prvky na stránce. Při první návštěvě to udělá dobrý dojem, ale časem se to člověku ohraje a přestane si toho všímat.\n<br>\nPozornost návštěvníka by měla být zaměřena na dosažení jeho cíle (domluvení schůzky, rezervace nebo koupě produktu, registrování se...)</p>\n<h2>Zpoždění</h2>\n<p>Pokud zdroj chcete přece jen načíst, můžete tento proces odložit. Zejména načítání velkých zdrojů dat jako jsou obrázky, audio a video záznamy, které jsou navíc až pod hlavní obrazovkou se vyplatí zpozdit.</p>\n<h2>Transformace</h2>\n<p>Místo velkého bitmapového obrázku (.jpg, .png), kde velikost souboru záleží na velikosti jeho rozlišení můžete použít <strong>vektor</strong> (.svg), který je datově nenáročný v jakémkoli rozlišení.\n<br>\nPokud přece jen potřebujete bitmapy, vyplatí se určitě je alespoň optimalizovat.</p>\n<h2>Optimalizace</h2>\n<p>Na internetu tradičně nepotřebujete a většinou ani nechcete dávat své obrázky v tiskové kvalitě. Optimalizovat se dá několika způsoby. Váš grafik nebo vývojář by měl vědět, která bije. Nejjednodušší způsoby, kterými můžete dosáhnout snížení velikosti obrázků obvykle zahrnují:</p>\n<ul>\n<li>Volba správného formátu</li>\n<li>Zmenšení rozlišení</li>\n<li>Komprese</li>\n<li>Snížení barevné hloubky</li>\n<li>Snížení počtu obrázků na stránce (princip eliminace)</li>\n</ul>\n<h2>Delegace</h2>\n<p>Zdroje, které načítáte můžete delegovat na speciálně nastavené serverové služby, zkráceně známé jako <strong>CDN</strong> (Content Delivery Network) - tedy síť pro doručování obsahu. Sem můžete zahrnout JavaScriptové frameworky a knihovny.\n<br>\nDalší způsob využití delegace je zobrazení náhledu obrázku (<strong>thumbnail</strong>) v minimální velikosti a větší verzi zobrazit až po kliknutí na miniaturu.</p>\n<h2>Kešování</h2>\n<p>Zdroje, které načítáte často je dobré tzv. zakešovat. Tedy uložit na uživatelův přístroj a načítat je jen tehdy, pokud se jejich obsah změní.\n<br>\nTypicky se kešují loga, obsah v hlavičce a patičce atd. Kešovat se dají například i <strong>výsledky častého hledání</strong>, např. top 5 nejprodávanějších nebo nejlevnějších produktů.</p>\n<h2>Líné načtení</h2>\n<p>Načtení se dá odložit i tzv. líným způsobem. V praxi to znamená, že se zdroje, které nejsou potřeba ihned, jakmile uživatel přijde na stránku načtou až potřeba budou.\n<br>\nPříkladem jsou obrázky v dolní části stránky, nebo načtení doporučených článků na konci stránky. Načtení lze spustit například tím, že uživatel ke zdroji doskroluje.\n<br>\nMnoho uživatelů na stránku jen vstoupí, ale stránku ani nepročtou, nepodívají se na konec. Nemá tedy smysl na každé načtení posílat všechny zdroje, když je využije jen část uživatelů.</p>\n<h2>Stránkování</h2>\n<p>Svým způsobem je klasické stránkování dobrou metodou, jak snížit počet načtených dat. Často užívanou je zejména na stránkách s velkým počtem článků (blog, novinky) nebo produktů (e-shop). Na každou stránku se tak dostane jen např. 10 článků nebo 20 produktů. Rychlost reakce a zatížení serveru i při velkém množství uživatelů je pro server zvladatelné.\n<br>\nStránkování lze použít i např. na <strong>vícekrokovém formuláři</strong>, který má hodně políček. Zamezíte tak tomu, aby uživatel dlouho něco vyplňoval a pak mu validátor řekl, že požadované uživatelské jméno není dostupné apod. Nebo aby při pohledu na to, kolik věcí musí vyplnit neodešel s úlekem rovnou.</p>\n<h2>Asynchronní načtení</h2>\n<p>Načtení velkého obsahu, který by jinak zpomalil celkové načtení stránky a doby, kdy s ní může uživatel pracovat se dá provést asynchronně, tedy v pozadí. Jakmile je obsah k dispozici, zobrazí se.\n<br>\nTímto způsobem se navíc nemusí načítat ani zakešovaný obsah hlavičky a patičky. Načítají se tak jen ty data, která se opravdu mění (text článku, produkty na stránce).</p>\n<h2>Rozdělení</h2>\n<p>Někdy stačí prostě dělat stránky kratší a jednodušší. Pro uživatele to bude srozumitelnější a nebude zahlcen příliš mnoho informacemi najednou.\n<br>\nNapříklad můžeme napsat adresu restaurace, kterou chceme uživateli doporučit a její recenzi dát do <strong>samostatného odkazu</strong>.\n<br>\nVýborným řešením jak na dělení dat je <strong>výpis</strong>. Nejčastěji se sním opět setkáte na blogu nebo e-shopu. Ve výpisu jsou náhledy produktů se zkráceným popisem nebo pár hlavními parametry. Případně nadpis a zkrácený text článku (cca prvních 100 - 250 písmen).</p>\n<h3>Ukázka</h3>\n<p>Vyrobil jsem příklad líného načtení na blogu, kde se další příspěvky načtou po zaskrolování dolů na konec stránky. Je to vlastně určitý způsob stránkování. Skrolovat se dá tak dlouho, dokud má databáze co posílat.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/infinite_scroll_blog_post/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/infinite_blog\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (18, 'Rozhodování priorit formou MoSCoW', 'rozhodovani-priorit-formou-moscow', '2020-11-10',
        '<p>Také jste někdy stáli před rozhodnutím, kdy jste si potřebovali vyjasnit priority? Jak jste je rozřadili? Vysoké, střední, nízké...hned teď, co nejdříve, později. I takové je možné kategorizování.\n<br>\nPokud jde o čas nebo o peníze, je správné určení priorit klíčové. Lidé používající Agile metody vývoje si vymysleli jiné, verbálnější pojmenování priorit. A vznikla tak zkratka MoSCoW.\n<br>\nJednotlivá zvýrazněná písmena znamenají:\n<br></p>\n<ul>\n<li>must have</li>\n<li>should have</li>\n<li>could have</li>\n<li>won´t have</li>\n</ul>\n<p>Jak rozpoznat, co dát do které kategorie?\n<br></p>\n<ul>\n<li>Pokud to bez toho nejde, pak to tam být musí</li>\n<li>To ostatní, o čem nepochybujeme, by tam mělo být a na řadu to ve vývoji přijde hned po tom, co tam být musí</li>\n<li>Pokud si něčím nejsme jistí, necháme si to na později a rozhodneme, až bude více informací nebo necháme uživatele, ať si to odhlasují</li>\n<li>Pokud o něčem naopak víme, že je to slepá ulička, nebo se nám vývoj prvku nevyplatí, řekneme si, že pokud se situace nezmění, nebudeme se tím zabývat</li>\n</ul>\n<p>Výsledkem je celkem jasný postup, který nám dává jednoduše a srozumitelně najevo, čím se zabývat teď a čím až potom. Pro dosažení efektivity je zároveň důležité vědět, na co časem neplýtvat.</p>',
        0, 0, 0),
       (19, 'Routování s ukázkou SpaceX', 'routovani-s-ukazkou-spacex', '2020-10-23',
        '<p>SpaceX je americká aerokosmická společnost, kterou založil Elon Musk. Nabízí svůj API na kterém je hezky vidět routování a koncové body (např.: /rockets, /landpads, /capsules). Architekturou se lze protunelovat až na velmi podrobné informace.\n<br>\nVyrobil jsem jednoduchý přepínač základních informací, který právě s touto architekturou pracuje. Ne však do takových detailů, vše je dost zjednodušeno. Detail je přístupný v odkazu u jednotlivého datového uzlu (nodu).</p>\n<p><a href=\"http://www.aplikace-svobodaweb-cz.loc/app/spacex_missions_data\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/space_x_historical_data\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (20, 'Responzivita webových stránek', 'responzivita-webovych-stranek', '2020-10-25',
        '<h2>Co je responzivita?</h2>\n<p>Pojem responzivita vychází ze slova response (odpověď, reakce). Je to schopnost přizpůsobit se a nejednat neustále jedním způsobem.</p>\n<h3>Proč je důležité, aby webové stránky byly responzivní?</h3>\n<p>Protože na ně uživatel může nahlížet z širokoúhlé televize nebo velkého monitoru stejně tak jako z mobilu drženého na výšku.\n<strong>Pokud vaše stránky nejsou responzivní, odrazujete tím uživatele</strong>, pro jejichž zařízení není web nastaven. Budou mít problémy se čtením obsahu a ovládání webu tlačítky atd.\n<br>\n<strong>Ale především budete mít horší výsledky na vyhledávačích</strong> (Google atd.), protože nesprávně nastavené weby mají postih (snížené skóre). Potenciální zákazníci se tedy mnohem pravděpodobněji dostanou na web vaší konkurence.\n<br>\nNedostatečné nastavení se může projevit následovně:</p>\n<ul>\n<li>Obrázky jsou příliš velké a vybíhají mimo obrazovku</li>\n<li>Obsah je částečně zakryt, nedá se kliknout na důležité tlačítko</li>\n<li>Text je nečitelný</li>\n<li>Načítají se zbytečně velké obrázky a tím se zpomaluje chod stránky</li>\n<li>Není možné kliknout na mobilu na správné tlačítko, protože jsou stěsnané k sobě</li>\n</ul>\n<p><strong>Takto např. vypadá náhled nedostatečně nastaveného webu:</strong>\n<br>\n<strong>Výsledek testu jasně ukazuje neúspěšný výsledek testu responzivity.</strong>\n<img src=\"natery_original_test_responzivity.png\" alt=\"\" /></p>\n<hr>\n<p><strong>Zde je výsledek z testu rychlosti načtení:</strong>\n<br>\n<strong>83% a 0.8s. Ohodnoceno indexem B. Není to špatné, ale mohlo by to být lepší.</strong>\n<img src=\"natery_original_test_rychlosti.png\" alt=\"\" />\n<br>\n<br>\nWeb v ukázce můžete <a href=\"http://www.natery-chynovsky.cz/\">vidět zde</a></p>\n<p>Základní responzitiva by měla zahrnovat optimalizaci zobrazení stránek podle šířky obrazovky zařízení uživatele. A nastavit dobré zobrazení a čitelnost alespoň pro 3 základní typy zařízení - malé (mobilní telefon), střední (tablet, notebook) a velké (kancelářský monitor).</p>\n<p><strong>Po úpravách web bez problémů v testu responzitivity uspěl:</strong>\n<img src=\"natery_upraveno_test_responzivity.png\" alt=\"\" />\n<br>\n<br>\n<strong>Test rychlosti také dopadl lépe:</strong>\n<br>\n<strong>94%, index hodnocení A, rychlost načtení 0.4s. Velmi dobrý výsledek.</strong>\n<img src=\"natery_upraveno_test_rychlosti.png\" alt=\"\" /></p>\n<p>Upravený web s modernějším responzivním designem můžete <a href=\"http://blog.svobodaweb.cz/assets/responzivita/chynovsky_upraveno/index.html\">vidět zde</a></p>',
        0, 0, 0),
       (21, 'Refaktoring kdy a jak', 'refaktoring-kdy-a-jak', '2020-10-23',
        '<h3>Co je to refaktorování kódu?</h3>\n<p>Je to podobné jako když probíráte skříň s oblečením. Něco vám už není, něco už je obnošené ale hodí se ještě třeba na chatu. Něco vyšlo z módy nebo jste to nahradili něčím lepším, praktičtějším nebo hezčím.\n<br>\nS kódem je to podobné. Důležité je, aby se v zdrojovém kódu nehromadily duplicity, mrtvý kód a kód, který byl nahrazen, protože je nefunkční nebo nezabezpečený, neprošel testy.</p>\n<h3>Proč jsou problematické duplicity?</h3>\n<p>Protože zhoršují čitelnost a přehlednost. Pokud nevím jasně, která ze dvou nebo více stejně či podobně pojmenovaných funkcí se spustí, nemůžu ručit za výsledek a jeho správnost. A jestli se v tom nevyznám já, tak kolegové to budou mít případně o to horší. Může to být výsledek špatného sloučení dvou verzí z GITu. Pokud se zachovala starší podoba funkce, kde chybí úpravy, objeví se stejný problém znovu.\n<br></p>\n<h3>Proč je mrtvý kód nebezpečný?</h3>\n<p>Protože počítače umí dělat věci a rozhodnutí rychleji než lidé. Tisíckrát rychleji. To ale platí i pro dělání chyb, pokud mají špatné nebo neplatné instrukce. Společnost <a href=\"https://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/\">Knight Capital Group</a> přišla o 365 milionů dolarů za 45 minut. A to jen protože se spustil kus kódu, který byl 8 let starý a neplatný.</p>\n<h3>Kdy je vhodná doba na refaktoring?</h3>\n<ul>\n<li>kód je nepřehledný</li>\n<li>kód obsahuje duplicity</li>\n<li>je potřeba zrychlit zpracování</li>\n<li>změnily se požadavky</li>\n<li>zlepšily se vaše znalosti</li>\n</ul>',
        0, 0, 0),
       (22, 'Reakce na aktuální dění a potřeba být v klidu', 'reakce-na-aktualni-deni-a-potreba-byt-v-klidu',
        '2020-10-23',
        '<p>Naše reakce na zprávy z politiky jsou někdy nepříjemné. Přesto nic není v kritické situaci důležitější, než zůstat v klidu.</p>\n<p>Vytvořil jsem aplikaci u které se můžete na pár minut zklidnit. A rozdýchat se. Návod najdete přímo v aplikaci.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/relax_breathe/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/relax_and_breathe_app\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (23, 'Psaní všemi deseti + aplikace', 'psani-vsemi-deseti', '2020-10-23',
        '<p>Ti z vás, kdo se to učili na škole to už máte za sebou. Ti z vás, kdo se to chcete naučit nebo se v tom právě zdokonalujete jste si pravděpodobně vygooglili jak na to.</p>\n<p>Standartní postup vyučuje psaní jednotlivých písmen střídavě levou a pravou rukou. Existují i relativně zábavné hry, kde s zvládnutým levelem přidáváte další klávesy. Většina z nich je ale zdarma jen po určitou míru (počet kláves).\nJá jsem ale přišel na to, že nejlepší způsob pro mne je psát reálná slova nebo věty. A to nejlépe české. Žádné vyťukávání znaků jfjf kdkd lsls ůaůaůa jako datel. Ke cvičení se dá využít jakýkoliv text - slohová práce, psaní deníčku, články na blog i chatování online. Můj bývalý kolega měl (zlo)zvyk při psaní a programování střídat jazykové sady. Programoval na anglické klávesnici a psal na české. Vždy to Alt + Shift přehodil tam nebo zpět. Chyby dělal v obou verzích a to hlavně protože zapomněl včas správně přepnout. Doporučuji tedy naučit se programovat i psát v jednom jazyku, byť to může být v něčem o trochu méně příjemné. Nic těžkého na tom není.</p>\n<p>Vyrobil jsem si hru, kde mi náhodně naskakují slova, která potřebuji opsat, abych získal další čas navíc. Zásobník má asi 600 slov a můžu si vybrat 3 obtížnosti, které přidají 3, 5 nebo 7 vteřin navíc.\nJe to velmi dobrý způsob, jak si jednak změřit jak jsem rychlý a přesný nebo se po ránu na minutku dvě rozcvičit. Slova jsou v angličtině, což sice neprocvičuje psaní celé české abecedy. Ale zase si připomenu, jak se některá slova píší.</p>\n<p>Zde je <a href=\"http://aplikace.svobodaweb.cz/app/game_typing_words\">odkaz</a></p>\n<p>Zde je <a href=\"https://github.com/psvoboda1987/game_typing_words\">repozitoř</a></p>',
        0, 0, 0),
       (24, 'Pravidelné cvičení přináší zlepšení', 'pravidelne-cviceni-prinasi-zlepseni', '2020-10-23',
        '<p>Jako každou dovednost, tak i programování je potřeba cvičit. Podobně jako hudbu. Člověk má pak nápady, jak zlepšit svůj um a posunout se zase o úroveň dále. Aby to vše bylo více melodické.\n<br>\nV jednom takovém cvičení jsem si řekl, že si naprogramuju klasickou hru - šibenici. Trochu jsem zjednodušil grafiku (hlavně panáčka). Ale bylo zajímavé naprogramovat logiku bez jakéhokoliv přihlížení na cizí řešení.\n<br>\nPravidla jsou jednoduchá. Hra se ovládá psaním písmen do volného pole. Pokud se objeví celý panáček, prohráli jste. Zkuste zavzpomínat, kdy jste hráli naposledy. A jestli není na čase procvičit nějakou dovednost.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/guess_the_word/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/guess_the_word\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (25, 'Proč je vývoj v PHP dobrá volba', 'proc-je-vyvoj-v-php-dobra-volba', '2020-10-23',
        '<p>PHP je dobrá volba pro vývoj webové stránky nebo aplikace. Existuje pro to několik důvodů.\n<br>\nOproti (ASP).NET mý tyto výhody:</p>\n<ul>\n<li><strong> rychlejší zpracování</strong>\n<br>\nPHP efektivněji využívá paměťové zdroje a má jednodušší architekturu</li>\n<li><strong> levnější provoz</strong>\n<br>\nWordpress je CMS psaný v PHP a pohání přes třetinu webových stránek na světě (je zdarma)</li>\n<li><strong> levnější hosting</strong>\n<br>\nASP potřebuje pro svůj běh IIS server s Windows\n<br>\nPHP stačí Linux, který je zdarma a je dostupný u většiny poskytovatelů</li>\n<li><strong> volnost při výběru databáze</strong>\n<br>\nASP potřebuje pro funkci zakoupenou Microsoft MS-SQL databázi\n<br>\nPHP podporuje řadu databází, nejpopulárnější je MySQL, PostGreSQL a MongoDB (všechny jsou zdarma)</li>\n<li><strong> dostupnost programátorů</strong>\n<br>\npočet programátorů ovládajících PHP je vyšší, snadněji tedy seženete posilu nebo náhradu</li>\n</ul>\n<p>Stručně shrnuto PHP je oproti .NET levnější, rychlejší, flexibilnější, dostupnější.\n<br>\nA pokud něco zákazníci chtějí, tak je to rychlý, spolehlivý web za nevelké peníze.\n<br>\nZhruba <strong>80% návštěvníků</strong> vašeho webu si bude při první návštěvě dělat obrázek o vaší firmě / osobě právě podle vašich stránek.\n<br>\nA stejné procento zákazníků bude očekávat ve svých prohlížečích načtení do 2 vteřin.</p>\n<p>Výhody PHP oproti Java</p>\n<ul>\n<li>nižší nároky na hardware (zejména paměť)</li>\n<li>o něco nižší nároky na programátora</li>\n<li>kratší doba k vytvoření malé či středně velké aplikace založené na webových technologiích</li>\n<li>snadná práce s různými typy běžných dat (úprava obrázků, tvorba QR kódů, komprimace souborů)</li>\n<li>odezva na změny zdrojového kódu - PHP nemá překladač (compiler), všechny změny se projeví okamžitě\n<br>\nna druhou stranu překladač umí zachytit některé chyby nebo překlepy a tím nějaký čas ušetřit</li>\n</ul>\n<p>Pokud tedy nebudujete komplexní software, který bude středobodem vaší firmy, ani nevytváříte aplikaci pro banku, kudy potečou miliardy dolarů, je PHP často jednodušším řešením.</p>',
        0, 0, 0),
       (26, 'Pragmatické programování', 'pragmaticke-programovani', '2020-10-23',
        '<h3>Co je to pragmatika?</h3>\n<p>Je to praktikování řeči (výroků), která nejen něco říká, ale také má nějaký cíl.\n<br>\n<strong>Pragmatický způsob</strong> je tedy takový přístup, kde se zaměřujeme na to, jestli se naše myšlenky a domněnky osvědčily a jestli jsou pravdivé a prospěšné.\n<br></p>\n<p><strong>Do pragmatického programování patří zejména:</strong></p>\n<ul>\n<li>Nabízej řešení nebo alternativy, ne výmluvy.\n<br>\nŘíct, že něco nejde je snadné, ale většinou nepravdivé. Je vhodnější popsat, co vyrobit lze (co vyrobit umím).</li>\n<li>Opravuj chyby, kterých si všimneš\n<br>\nDoma bys také nenechalirozbité okno nebo dveře měsíc bez opravy.</li>\n<li>Při řešení detailů nezapomeň na cíl\n<br>\nDetaily jsou na nic, pokud nefunguje celek.</li>\n<li>Zůstaň konkrétní\n<br>\nJe fajn, že hoši ve Facebooku a Googlu vymysleli nový framework nebo metodiku. Pokud přijde nová technologie, stojí za prozkoumání, protože nemá smysl vymýšlet trakař po padesátéosmé. Nemusí to ale znamenat, že hned zahodím to, co používám, když to funguje a vyhovuje konkrétním podmínkám.</li>\n<li>Rozhodnutí a informace nemusí být finální\n<br>\nProjekt a jeho priority se průběžně vyvíjejí a mění. Spíš než jako vytesané do kamenu si to představ, že je to vyryté v písku na pláži a jednou přijde něco, co to odnese pryč.</li>\n<li>Pokud nemáš k dispozici fakta pracuj s odhadem\n<br>\nSvůj odhad si ale zapiš, otestuj a před vydáním proveď potřebné korekce. Počítej s tím, že odhad není spolehlivý.</li>\n<li>Počítej s nedokonalostí\n<br>\nDokonalý software neexistuje. I perfektní kód může být rozbit špatnými vstupními informacemi. Raději se zaměř na ověření a ošetření vstupních informací a upozorni uživatele na ně.</li>\n<li>Dokumentuj\n<br>\nNejen vývoj aplikace, ale i počáteční požadavky, aby se dalo snadno prokázat, že kód dělá to, co dělat má. Ani víc, ani méně.</li>\n<li>Odděl proces modelování dat od způsobu jejich zobrazení\n<br>\nTo, jaká data jsou potřeba se nemění tak často, jako to, jak si je uživatel přeje zobrazit.</li>\n<li>Testuj vše, co naprogramuješ a to pořádně\n<br>\nNenechávej uživatele, aby hledali chyby za tebe.</li>\n<li>Mysli jako uživatel\n<br>\nNejlépe se uživatelské potřeby dovíš, když uživatele uvidíš přímo v akci.</li>\n<li>Používej skripty místo ručně psaných příkazů\n<br>\nJedině tak se budeš moci zpětně podívat, co jsi onehdy dělal. A budeš moci zopakovat stejný proces stejným způsobem. Toto platí zejména pro testování.</li>\n<li>Svou práci podepiš a nes zodpovědnost za to, co jsi vytvořil\n<br>\nPokud však někdo používá tvůj kód nebo aplikaci na něco jiného, než pro co byly strořeny, je to na něm.</li>\n</ul>',
        0, 0, 0),
       (27, 'Pojmy z IT a aplikace na procvičování paměti', 'pojmy-z-it-a-aplikace-na-procvicovani-pameti',
        '2020-10-23',
        '<p>Vzpomněl jsem si na kalendář s čokoládovými kostičkami v jednotlivých okénkách předcházející Štědrému dnu, který jsem jako dítě kdysi dostal od rodičů. Na podobném principu jsem naprogramoval aplikaci, kam jsem vložil dvě desítky pojmů, se kterými se jako programátor občas setkávám.\nÚpravou zdrojového kódu si můžete aplikaci naklonovat a vložit si vlastní pojmy.\nA pokud se vám nedaří si význam pojmů a zkratek zapamatovat, můžete použít jednoduchou pomůcku - <strong><a href=\"http://aplikace.svobodaweb.cz/app/memory_cards\">digitální pamětové kartičky</a></strong>. Zde si můžete vytvořit &quot;karty&quot; které se kliknutím dají otáčet. Můžete si tak jimi při testování vlastních znalostí listovat a snažit si vzpomenout na správnou odpověď.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/random_info_calendar/\">Odkaz na kalendář</a></p>\n<p><a href=\"https://github.com/psvoboda1987/info_calendar\">Odkaz na zdrojový kód kalendáře</a></p>',
        0, 0, 0),
       (28, 'Plnění cílů a předsevzetí', 'plneni-cilu-a-predsevzeti', '2020-10-23',
        '<p>Také jste si na tento rok dali nějaké cíle?\n<br>\nPokud ano, jistě víte, že není dobré, když se vám stane to, že na jejich plnění zapomenete.\n<br>\nNejlepší způsob, jak se na nový rok připravit, je zvládnout co nejvíc cílů z tohoto roku, aby vám nic nepřeteklo do následujícího roku.\n<br>\nNa zobrazení toho, kolik mám času, než tento rok skončí, jsem si vyrobil jednoduchou aplikaci. Naprogramoval jsem ji tak, aby se nikdy nemusela konfigurovat. Tzn. že po skončení jednoho roku, se automaticky přenastaví na nejbližší konec současného roku.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/countdown_new_year/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/new_year_countdown\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (29, 'Objektově orientované CSS', 'objektove-orientovane-css', '2020-11-07',
        '<p>Objektově orientované psaní se na CSS objekt dívá jako na komponentu tvořenou HTML, CSS a případně JavaScriptem.\n<br>\nCílem OOCSS je snadné přepoužití komponent na jiném místě stejného projektu, ale i v jiném projektu. A zajištění validního vykreslení. A zároveň oddělení základního vzhledu od úprav pro specifický projekt a tím zmenšení přenášeného množství CSS.\n<br>\nZde jsou jeho hlavní principy:</p>\n<h2>1. Vzhled je nezávislý na struktuře</h2>\n<p>Do CSS nezahrnuju HTML. Popisuji-li komponentu CTA (call to action), vytvořím <strong>.cta</strong>, ne <strong>section.cta</strong> nebo <strong>article.cta</strong></p>\n<h2>2. Obsah je nezávislý na kontejneru</h2>\n<p>CSS definuji pro snadnou a bezkonfliktní přepoužitelnost raději abstraktněji, tedy méně specificky. Nepoužiju tedy <strong>.homepage .cta</strong> ale raději <strong>.cta-homepage</strong>, pokud potřebuji větší specificitu.</p>\n<h2>3. Prioritu má nízká specifičnost</h2>\n<ul>\n<li>Raději než <strong>#id</strong> použiju <strong>.class</strong></li>\n<li>vynechávám pravidlo <strong>!important</strong></li>\n<li>selektory příliš nekombinuji (<strong>.cta.cta-primary.button</strong>)</li>\n<li>nespecifikuji pořadí elementů (<strong>.cta &gt; .cta-header &gt; .button</strong>)</li>\n</ul>\n<h2>4. Vytvářím oddělené moduly</h2>\n<p>Tímto postupem si připravuji cestu pro nezávislé, konzistentní a dobře odhadnutelné chování každého prvku, který tvořím. Při použití objektu si mohu jednoduše css rozdělit a podle potřeby je zapojovat (import \'button.css\'; import \'cta.css\') jako elektrické pojistky.</p>\n<p>Dobrou alternativou jsou i:</p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/skalovatelna-a-modularni-architektura-css\">SMACSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/udrzitelnost-rustu-css-pomoci-stupnovane-specificity\">ITCSS</a></p>\n<p><a href=\"http://blog-svobodaweb-cz.loc/tvorba-css-jmen-metodou-bem\">BEMCSS</a></p>',
        0, 0, 0),
       (30, 'Objektově orientované programování', 'objektove-orientovane-programovani', '2020-12-10',
        '<h2>Objektově orientované programování</h2>\n<p>OOP je hitem posledních několika desítek let. Většina slušných programovacích jazyků využití objektů podporuje. <strong>Objekty přinášejí mnoho výhod</strong>, ale samozřejmě nejsou odpovědí na vše.\n<br>\nPři správném použití <strong>abstrakce</strong> a <strong>dědičnosti</strong> lze objekty velmi efektivně využít. Moje oblíbená metoda využití objektů je <strong>ORM</strong>. Tedy tvorba entit, které představují záznamy v databázi. A to jak pro zápis, tak pro čtení dat.\n<br>\nDědičnost oceníte hlavně v momentě, kdy chcete určitou část objektu <strong>zapouzdřit</strong>. A tím <strong>zabránit nevhodné manipulaci</strong> s důležitou částí jeho struktury, funkcionality nebo vlastností. Další velká výhoda je navázání nové třídy, která slouží jako vzor pro tvorbu objektů, na rodiče a zachování původní funkcionality. Pokud se tedy vyskytne unikátní situace, mohu použít <strong>&quot;přetíženou&quot;</strong> metodu, ale zároveň se nemusím starat o kopírování původní definice z rodiče. Obě metody mám tedy přístupné a snadno volatelné.\n<br>\nObjekty tak snadno mohou měnit část svého charakteru a je možno je <strong>tvořit dynamicky</strong>, například pomocí návrhového vzoru &quot;factory&quot;. Metoda sama rozhodne o tom, jaký objekt se má vytvořit na základě vstupních faktů.\n<br>\nTvorba nového objektu může být ale svízelná v momentě, kdy jeho vytvoření je výkonově náročné a přitom použití objektu je pouze na krátkou dobu. To samé platí pro dědičnost, která může snadno přetéct a být jednak méně přehledná a navíc <strong>přebytečná</strong>. Objekt, který dědí spoustu metod, ale využívá jen pár nemusí být moc efektivní.\n<br>\nI to se dá ale řešit. Dědění není povinné. A rozšíření funkcionality může být řízeno principem <strong>kompozice</strong>. Tedy tak, že do kompoziční metody vložím objekt a přidám k němu určitou metodu. To je výhodné zejména v momentě, kdy potřebuji netypickou kombinaci funkcionality vlastností. Mohu na objekt navléct jen určité kusy, které potřebuji a nepořizovat si celý set.\n<a href=\"https://github.com/psvoboda1987/oop_composition_method\">Ukázka kompozičního principu OOP</a>\n<br>\nJak to tak bývá, pro efektivní práci s OOP je potřeba vědět, <strong>kdy je co vhodné použít</strong> a kde a za jakých okolností to nasadit. Často se projekt dá zvládnout jediným principem, někdy je lepší kombinace. Málokdy existuje tzv. &quot;zlaté kladivo&quot;, které umí vyřešit všechny úkoly. Někdy je potřeba zatlouct hřebík, někdy je lepší zavrtat vrut.</p>',
        0, 0, 0),
       (31, 'Pár tipů na rychlejší Javascript', 'par-tipu-na-rychlejsi-javascript', '2020-11-12',
        '<p>Před tím, než se zamyslím, jak napsat dobrý kód nebo zlepšit stávající se raději zeptám na pár otázek.</p>\n<ul>\n<li>Musím to vůbec řešit?</li>\n<li>Musím to řešit Javascriptem?</li>\n<li>Jak to udělat co nejlépe?</li>\n<li>Bude lepší něco přidat, odebrat, nebo upravit?</li>\n</ul>\n<p>Rychlost by neměla jít na úkor funkčnosti, použitelnosti a kompatibilitě. Používání novinek z posledního vydání ES není vždy úplně ten nejlepší krok.</p>\n<h3>Jaké chyby jsem nejčastěji dělal při programování</h3>\n<ul>\n<li>přílišný důraz na technické detaily (minimalizace počtu řádků, proměnných)</li>\n<li>přehnaná optimalizace (refactoring dříve, než jsem změřil výkonnost)</li>\n<li>používání nadbytečných metod</li>\n</ul>\n<p><strong>Příklady nevhodných kroků:</strong></p>\n<ul>\n<li>transformace typu Array.from() jen kvůli napsání smyčky .forEach()</li>\n<li>použití ryze funkčního stylu programování na elementy, které se tak často nemění</li>\n<li>transformace dat, vedoucí ke ztrátě informace o původním datovém vstupu</li>\n<li>výběr pomocí querySelectorAll() místo getElementsByClass() nebo getElementsByTagName()</li>\n<li>ukládání proměnných, které se použijí v kódu jen jednou</li>\n<li>neukládání proměnných, které se používají několikrát</li>\n<li>použití knihovny typu jQuery na pár funkčních celků, kde to není nutné</li>\n<li>nevyužití vhodné, dobře napsané a spolehlivé knihovny tam, kde se to hodí</li>\n<li>nevhodné pojmenování funkcí a proměnných (zvyšuje čas potřebný na porozumění kódu ostatním)</li>\n<li>nepoužití linteru, debuggeru, striktního módu a podobných pomůcek, které běžné chyby najdou ještě před spuštěním</li>\n<li>příliš málo validací (naivní spoléhání, že vždy přijde správný vstup a vše bude vždy dostupné)</li>\n<li>příliš mnoho validací (způsobené zejména jejich nepochopením)</li>\n<li>malá nebo téměř žádná míra testování</li>\n<li>použití horkých novinek nebo beta verzí třetí strany bez delšího testování</li>\n<li>nevyužití automatizace</li>\n</ul>\n<p>Když to shrnu, většina chyb se stane, když člověk vybere nevhodnou alternativu z několika možností. Nebo když se přibližuje extrémům v jednom nebo druhém konci spektra.</p>',
        0, 0, 0),
       (32, 'Nevhodné vzory a řešení v programování', 'nevhodne-vzory-a-reseni-v-programovani', '2020-12-10',
        '<p>Stejně jako existují nějaké vzory, které programátorovi pomáhají posunout jeho kód na vyšší úroveň existují i tzv. anti vzory. Znaky problematické praktiky, která ze zkušenosti působí více problémů než užitku. Podíváme se na některé z nich.</p>\n<h2>Špagety</h2>\n<p>Kód který je nesrozumitelný, nečitelný a nemá žádnou strukturu, žádné uspořádání. Viděli jste někdy alespoň na obrázku neodbornou elektro instalaci? Možná vám to připomene nepořádek v pokoji studentů na koleji či něco podobného, co jste kdysi vyklízeli z garáže po letech. Nechce se vám do toho, ale čím dříve se tím proberete, rozmotáte všechna klubka, tím méně dalšího chaosu se vám přestane nabalovat.\n<img src=\"bad-wiring.jpg\" alt=\"\" /></p>\n<h2>Zlaté kladivo</h2>\n<p>Možná je to z lenosti nebo podohlnosti, ale může se vám stát, že přestanete kreativně přemýšlet a začnete používat jedno řešení na každý problém. Typickou ukázkou může být jQuery. Je to užitečná knihovna, která má své místo. Ale líný programátor, který ji použije na každý byť sebemenší projekt, kde chce jen zapojit efekt na klikací tlačítko svou leností nutí uživatele na mobilních telefonech stahovat desítky nebo i stovky kB dat, které nevyužijí.</p>\n<h2>Táhnutí kotvy za lodí</h2>\n<p>Ponechávání starého kódu ve zdrojovém kódu, namísto jeho přesunutí do archivu repozitoře. Tento anti vzor často vidíme i na lidech v běžném životě. Koupím si tohle, protože to možná někdy budu potřebovat. Teď to sice nepotřebuji a nevím jistě, jestli kdy budu, ale teď je to ve slevě a tak jsou to potenciálně ušetřené peníze. Ale zároveň jsou to také potenciálně vyhozené peníze. Taky jsem na svůj první výlet s batohem na zádech nesl spoustu věcí navíc, které jsem pak nepoužil. V jednoduchosti je síla.</p>\n<h2>Hluchý kód</h2>\n<p>Kód, který je ve skriptu přítomen, ale autor už ve firmě nepracuje a ostatní tomu nerozumí dost na to, aby si troufli ho odstranit. A tak se na něj kupí nové dodatky. Místo toho, aby se udělal jasný a čistý řez a odstranilo se vše, co není potřeba a aplikace měla jen to, co potřebuje se přenáší minulost stále dál a dál. Protože chytrý údržbář vám tvrdí, že co není rozbité, to neopravuj. Do určité míry má pravdu. Ale až se to jednou rozbije a nebude nablízku nikdo, kdo rozumí tomu, jak to vlastně funguje a autor sám už je někde za sedmero horami, zůstanete na to sami a pod časovým stresem.</p>\n<h2>Švýcarák</h2>\n<p>Jedna classa, která umí vše, volá se všude a dělá každou činnost, která je v chodu aplikace potřeba. Když se ale objeví sebemenší problém, spadne ne jen část, která řeší problematický úsek, spadne úplně vše. Je to velmi nebezpečný vzor. Je to jako mít klíče od bytu, auta a všechny doklady, peníze a platební karty s PINem napsaným fixou na druhé straně spolu s telefonem v ledvince na dovolené. Pokud vám ji někdo na pláži ukradne, rázem se z vás stane v podstatě bezdomovec. Nemáte žádnou zálohu a řešení je velmi svízelné.</p>\n<h2>Přizdisráč / Prostředník</h2>\n<p>Prostředník existuje jen protože ostatní třídy, jejichž objekty spolu komunikují nejsou dost dobře napsané na to, aby spolu mohli komunikovat napřímo. Je zde tedy servírka, která jen běhá mezi kuchyní a platebním pultem. Mnoho firem si tohoto fenoménu všimlo. Že management jde udělat mnohem jednodušeji. Všimli jste si, že v nákupních obchodech už není 10 pokladních, ale jen 4? A že jsou nainstalovány nové samoobslužné poklady, na které jen pracovník obsluhy dohlíží a řeší pouze vzniklé problémy? Existují i bezobslušné benzínky, kde sice není koš a kýbl s vodou na umytí oken, ale benzín je tam o 2 Kč levnější. Právě protože se ušetří za obsluhu.</p>',
        0, 0, 0),
       (33, 'Man day ceny', 'man-day-ceny', '2020-10-23',
        '<p>Tabulka s počty hodin dle tarifu na cílovou částku 83 000 Kč / měsíc (kvůli optimalizaci daní a nepřekročení sazby pro registraci k platbě DPH)</p>\n<table>\n<thead>\n<tr>\n<th>hod/den</th>\n<th>kč/měsíc</th>\n<th>kč/hod</th>\n<th>hod/měsíc</th>\n<th>dnů/měsíc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8</td>\n<td>83000</td>\n<td>500</td>\n<td>166</td>\n<td>21</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>600</td>\n<td>138</td>\n<td>17</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>700</td>\n<td>119</td>\n<td>15</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>800</td>\n<td>104</td>\n<td>13</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>900</td>\n<td>92</td>\n<td>12</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>1000</td>\n<td>83</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>hod/den</th>\n<th>kč/měsíc</th>\n<th>kč/hod</th>\n<th>hod/měsíc</th>\n<th>dnů/měsíc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7</td>\n<td>83000</td>\n<td>500</td>\n<td>166</td>\n<td>24</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>600</td>\n<td>138</td>\n<td>20</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>700</td>\n<td>119</td>\n<td>17</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>800</td>\n<td>104</td>\n<td>15</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>900</td>\n<td>92</td>\n<td>13</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>1000</td>\n<td>83</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>hod/den</th>\n<th>kč/měsíc</th>\n<th>kč/hod</th>\n<th>hod/měsíc</th>\n<th>dnů/měsíc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6</td>\n<td>83000</td>\n<td>500</td>\n<td>166</td>\n<td>28</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>600</td>\n<td>138</td>\n<td>23</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>700</td>\n<td>119</td>\n<td>20</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>800</td>\n<td>104</td>\n<td>17</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>900</td>\n<td>92</td>\n<td>15</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>1000</td>\n<td>83</td>\n<td>14</td>\n</tr>\n</tbody>\n</table>',
        0, 0, 0),
       (34, 'Moderní vývoj - 12 factor App', 'moderni-vyvoj-12-factor-app', '2020-11-08',
        '<p><strong>12 faktorů</strong> je soupis dobrých a osvědčených zásad, které vycházejí ze zkušenosti odborníků z cloudové platformy <a href=\"www.heroku.com\">Heroku</a>. Ta hostuje tisíce aplikací v různých programovacích jazycích. Když dali vývojáři hlavy a zkušenosti dohromady, sepsali 12 zásad, které se vyplatí více či méně dodržet pro téměř všechny moderní aplikace. Zejména ty, které běží jako služby.\n<br>\nJaké jsou hlavní zásady?</p>\n<h2>I. Zdrojový kód</h2>\n<p>Jeden zdrojový kód, který je uložen ve verzovacím systému. Zdroj může mít více prostředí (vývoj, test, produkce)</p>\n<h2>II. Závislosti</h2>\n<p>Konkrétně specifikované a izolované závislosti (např. package.json)</p>\n<h2>III. Konfigurace</h2>\n<p>Nastavení je uložené v prostředí (test.env, prod.env) a zároveň není uložené ve verzovacím systému</p>\n<h2>IV. Podporné služby</h2>\n<p>Podporné a pomocné služby (cURL) jsou připojené zdroje a chováme se k nim v podstatě jako k závislostem</p>\n<h2>V. Build, release, run</h2>\n<p>Fáze tvorby, vydání a běhu jsou odděleny</p>\n<h2>VI. Procesy</h2>\n<p>Aplikace běží v jednom nebo více bezestavových procesech, které jsou odděleny</p>\n<h2>VII. Vazba na port</h2>\n<p>Služby se exportují přes porty a tím jsou od sebe odděleny</p>\n<h2>VIII. Souběžnost</h2>\n<p>Škálování probíhá pomocí modelu procesů, neřeší se přímo v aplikaci</p>\n<h2>IX. Disponibilita zdrojů</h2>\n<p>Maximalizace robustnosti rychlým startem a citlivým vypnutím</p>\n<h2>X. Vývojová a produkční shodnost</h2>\n<p>Vývojové, testovací a produkční prostředí jsou si maximálně podobná (např. všude používám MySQL)</p>\n<h2>XI. Logy</h2>\n<p>Logy jsou proudy událostí, dávají informace o tom, co se kdy a kde stalo</p>\n<h2>XII. Admin procesy</h2>\n<p>Správcovské úlohy se spouští jako jednorázové procesy (nespouští se manuálně z příkazové řádky, aby šly shodně zopakovat)</p>',
        0, 0, 0),
       (35, 'Moderní vývoj - DRY vs. WET', 'moderni-vyvoj-dry-vs-wet', '2020-11-08',
        '<h3>Don´t repeat yourself - neopakuj se</h3>\n<p>Proč je dodržování tohoto vývojového pravidla důležité a prospěšné?\n<br>\nPokud má 1 informace 1 zdroj, pak jeho změnou se projeví v celém systému.\n<br>\nJá osobně cítím, že tento způsob organizace je použitelný nejen v programování, ale v organizaci jakýchkoliv informací. Ať je to seznam úkolů (todo list) nebo seznam příjmů a výdajů. Pokud je mám na více místech, např. z důvodu zálohování dat, je to problém, pokud se nesynchronizují. A je jen otázkou, zda z toho bude problém menší či větší.\n<br>\nPokud mám navíc 2 různé, nesynchronizované zdroje dat, které se mírně liší, většinou je to po nějakém čase obtížné rozhodnout, který z nich je ten správný. A v zdrojovém kódu je to to samé. Rozhodnout v případě konfliktu dat, které se perou o 1 místo je riskantní operace. Pokud je vše dobře zaverzované, dá se to většinou vyřešit, ale vždy je to plýtvání časem a energií na něco, čemu se dalo předejít.</p>\n<p><strong>WET</strong> jako protiklad má několik vtipných a trefných popisků:</p>\n<ul>\n<li>Write everything twice</li>\n<li>Write every time</li>\n<li>We enjoy typing</li>\n<li>Waste everyone´s time</li>\n</ul>',
        0, 0, 0),
       (36, 'Moderní vývoj - KISS', 'moderni-vyvoj-kiss', '2020-11-08',
        '<p>Tento akronym o tom, jak je důležitá jednoduchost, jste možná v nějaké formě již potkali. Původně s ním údajně přišel Kelly Johnson, letecký konstruktér.\n<br>\nV různých verzích zní:</p>\n<blockquote>\n<p>Keep it small and simple\n<br>\nKeep it short and simple\n<br>\nKeep it simple and straightforward</p>\n</blockquote>\n<p>Jednoduchosti se drží nejen vizuální design, ale i principy v programování. Například <strong>funkční</strong> styl programování, kde se využívá krátkých, jednoduchých funkcí, které dělají 1 věc, ale dělají ji dobře. Dobře napsané funkce se pak dají řetězit a výsledek bude stále relativně rychlý a spolehlivý proces. Na podobném principu je založen i OS Linux v celkově <strong>Unixové systémy</strong>.\n<br>\n<strong>Minimalizmus</strong> je v jedné či druhé formě globálně uznávaný styl. Řada kapacit tvrdí a tvrdila to samé:\n<br></p>\n<blockquote>\n<p><em>Colin Chapman</em> [Lotus Cars] - zjednoduš a pak odlehči\n<br>\n<em>Albert Einstein</em> [vědec] - dělej vše tak jednoduše, jak to jde\n<br>\n<em>Mies Van Der Rohe</em> [architekt] - méně je více\n<br>\n<em>Antoine de Saint Exupéry</em> [básník] - dokonalost není tam, kde se nedá nic přidat, ale spíš tam, kde nejde nic odebrat\n<br>\n<em>Ockhamova břitva</em> - nejjednodušší řešení bývá často to správné.</p>\n</blockquote>',
        0, 0, 0),
       (37, 'Moderní vývoj - MVC', 'moderni-vyvoj-mvc', '2020-11-08',
        '<p>MVC znamená Model View Controller. Je to tedy pojmenování částí aplikace podle toho, co jednotlivá část dělá, za co má zodpovědnost.\n<br>\nPředstavte si, že máte aplikaci napsanou v jediném souboru. V praxi rychle poznáte, že to má řadu nevýhod.\n<br></p>\n<ul>\n<li>ztěžuje vám to přepoužití jednotlivých částí a funkcionalit na jiném projektu, protože ho v dlouhém kódu musíte trpělivě vyzobávat</li>\n<li>ztěžuje vám to testování</li>\n<li>zpomaluje to práci se souborem, protože se v něm špatně orientuje</li>\n<li>komplikuje to práci v týmu, protože když jeden řeší vzhled a druhý data, oba mění stejný soubor a vznikají jim tak neustále konflikty ve verzovacím systému</li>\n<li>komplikuje to odstraňování chyb, protože chyba může být v čemkoliv - HTML, CSS, SQL, JS...</li>\n<li>navíc je použití několika značkovacích, skriptovacích a programovacích jazyků v jednom souboru nepřehledné a editor je z toho také zmatený</li>\n</ul>\n<p>Jak se tomu vyhnout? Jednoduše, rozdělení do několika vrstev, kde se řeší jen jedna věc. Jak to vypadá v realitě, když navštívíte firmu?\n<br>\nPřijdete osobně na <em>adresu sídla</em>. Dorazíte na <em>recepci</em>, kde vás vrátný nebo recepční požádá o popis toho, co zde chcete, případně kam jdete. Vy mu to řeknete a on vás nasměruje, případně udělá telefonát osobě vedoucí daný úsek ve firmě. Od ní po telefonu dostane info, že je to v pořádku, že vás má pustit a dát vám žlutou <em>návštěvnickou kartu</em>. Vy dojdete na místo a jednáte s osobou, za kterou jste přišli, ona vám dá vizitku, abyste příště mohli zavolat přímo jí.\n<br>\nPokud navštívíte firmu na internetu, je to v základu stejné. Přijdete na <em>webovou adresu</em>. Tam uvidíte domovskou / <em>hlavní stránku</em>, která vám popíše, kam se můžete dostat a odnaviguje vás tam, kam potřebujete. To je vizuální část, tedy <strong>View</strong> (<em>recepční</em>). Ta vám aniž o tom třeba víte dá nějaký <em>token</em>, návštěvnický variabilní symbol. O přesměrování ke správným datům se stará nějaká řídící struktura, <strong>Controller</strong> (<em>vstupní karta</em> a její naprogramování). A zde vám <strong>Model</strong> (<em>obchodník</em>) předá data. Namodeluje vám např. hypotéku na bydlení nebo leasing na auto.\n<br>\nMVC tedy není nic nového. Je to jen použití toho, jak se úlohy rozdělují běžně v praxi. Jako v našem příkladu: recepční, obchodník a vedoucí.</p>',
        0, 0, 0),
       (38, 'Moderní vývoj - SOLID', 'moderni-vyvoj-solid', '2020-11-08',
        '<p>Slyšeli jste o objektově orientovaném vývoji? Pak jste pravděpodobně slyšeli o zkratce SOLID.\n<br>\nCo znamená? Nejprve v originálním znění.\n<br>\n<strong>S</strong>ingle responsibility\n<strong>O</strong>pen for addition, closed for modification\n<strong>L</strong>iskov substitution principle\n<strong>I</strong>nterface seggregation\n<strong>D</strong>ependency inversion (big-&gt;small == OK, small-&gt;bug != OK)\n<br>\nA nyní v češtině a zjednodušeně:\n<br></p>\n<h2>Jediná zodpovědnost</h2>\n<p>Třída, pomocí které vytvoříme nový objekt by měla být logickým celkem. Měla by řešit jen to, co od ní potřebujeme. Pokud máme třídu <strong>Obdélník</strong>, neměla by se zabývat ničím jiným. Pokud chceme vytvořit kruh, napíšeme si třídu <strong>Kruh</strong>. Je vhodné tyto dvě třídy oddělit. Pokud se v něčem shodují, jsou si podobné, můžeme je propojit s rodičem <strong>Tvar</strong>. Ta může mít abstraktní podobu a nastavit, že objekt má metodu <strong>spočítejObsah()</strong>.</p>\n<h2>Objekt je možno rozšířit ale ne modifikovat</h2>\n<p>Pokud potřebujeme novou funkcionalitu, ponecháme třídu v původním stavu a doplníme ji o novou funkci <strong>spočítejObvod()</strong>. Nebudeme měnit to, co už ve tříde je, protože je to pravděpodobně otestováno, zaverzováno a požito jinde. Změnou v předchozím obsahu třídy bychom mohli změnit funkcionalitu a tím dostat jiné výsledky, než které potřebujeme. Je tedy lepší novou funkci zkopírovat z původní, přejmenovat ji a upravit dle potřeb.</p>\n<h2>Liskovové princip nahraditelnosti</h2>\n<p>Každá podtřída by měla být schopna nahradit svého rodiče. Podtřída <strong>Obdélník</strong> by v metodě <strong>spočítejObsah()</strong> měla například vracet stejný typ hodnoty jako <strong>Tvar</strong>. Buď obě vrací číslo nebo textový řetězec. Ale ne jednou tak a podruhé jinak.</p>\n<h2>Oddělený interface</h2>\n<p>Uživatel nesmí být nucen implementovat metody, které nepoužívá. Vytvoříme tedy <strong>InterfaceTvaru</strong>, který implementuje metody <strong>spočítejObvod()</strong> a <strong>spočítejObsah()</strong> je to v pořádku. Pokud bychom ale do něj zahrnuli i metodu <strong>spočítejObjem()</strong>, je to už nežádoucí. Protože tvar je 2D a objem potřebuje k výpočtu 3 rozměry. Pokud je metoda <strong>spočítejObjem()</strong> v testovacím režimu a není doladěná, budou se nám hlásit chyby z metody, kterou nepoužíváme ani nepotřebujeme. Je tedy potřeba vytvořit <strong>InterfaceTělesa</strong>, který může použít 2D metody i novou metodu řešící objem tělesa.</p>\n<h2>Logické nastavení závislostí a priorit</h2>\n<p>Třída, která komunikuje z databází by neměla být závislá na tom, jestli ji data předá driver typu MSSQL nebo MySQL. A je vhodné ji proto napsat <em>abstraktněji</em> nebo jinak řečeno volněji. A to tak, že používá <strong>db_driver</strong> a nezáleží jakého typu. Pokud tedy nefunguje driver, chybu jdeme hledat a řešit tam. Pokud nefunguje třída, která data zpracovává, také víme, kam se podívat.\n<br>\nPokud bychom změnili později typ databáze, museli bychom přepsat metody, které jsme již implementovali a tím bychom porušili druhý princip!</p>',
        0, 0, 0),
       (39, 'Najděte tu správnou hudbu k práci', 'najdete-tu-spravnou-hudbu-k-praci', '2020-10-23',
        '<p>Posloucháte rádi k práci hudbu? Já ano. Jestli si nemůžete vzpomenout na to, který autor napsal vaši oblíbenou píseň, nebo jestli je nazpívaná v podání několika umělců můžete snadno zjistit. Existuje řada vyhledávačů, které umí podle různých vstupních dat dohledat píseň nebo autora.\n<br>\nJá jsem se na jednu vyhledávací API napojil a vyrobil aplikaci, která vám hudební vyhledávání umožňuje. Můžete ji vyzkoušet, vyhledávání je zdarma, proto není zajištěna 100% funkčnost. Zdroj dat je zahraniční, proto se vám nemusí úspěšné hledání podařit, zvlášť pokud hledáte český titul.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/lyrics_search_engine\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/lyrics_search_engine\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (40, 'Užitečné návrhové vzory', 'navrhove-vzory', '2020-12-10',
        '<p>Některé návrhové vzory jsou velmi užitečné a je vhodné je použít tam, kde se hodí. Zde je 5 populárních vzorů.</p>\n<h2>Adaptér</h2>\n<p>Funguje jako dekorace. Je to přizpůsobení se konkrétním detailům. Jeho použití nám dává možnost rychle reagovat na změnu některých detailů v naší aplikaci. Typickým příkladem může být třída pro umožnení komunikace s různými typy databáze. Metody zůstanou stejné, proto kód, který používají například objekty (vytvoř, změň, načti, odstraň) nemusí být měněn. Mnozí z vás asi znají cestovní adaptér pro vaši nabíječku.</p>\n<h2>Fasáda</h2>\n<p>Je v podstatě interface, který může zjednodušovat komplexní problémy na jednoduché příkazy. Všechny operace, které je potřeba vykonat se tak delegují o kus dál. Velmi to připomíná fungování ORM objektů, které umožňují jednoduchou komunikaci s databází. Objektu dám např. jednoduché metody (vytvoř, změň, načti, odstraň). Jejich detaily mohou být propojeny právě výše zmíněným adaptérem, aby se zamezilo problémům mezi MSSQL a MySQL.</p>\n<h2>Továrna</h2>\n<p>Továrna slouží na dynamickou tvorbu objektů (většinou na základě vstupních parametrů). Vytvoříme nový objekt a vnitřní skrytá logika rozhodne o tom, jaký typ objektu se vytvoří. Opět slouží ke zjednodušení  práce s aplikací a ponechání složitějších procesů na pozadí.</p>\n<h2>Strategie</h2>\n<p>Chování třídy upravujeme podle potřeb za běhu. Vytvoříme jeden nebo více objektů s rozdílnou strategií a kontextový objekt. Do kontextu dáváme data podle zvolené strategie. Příkladem může být kalkulačka, kde měníme operace plus / minus / krát / děleno. A čísla se zpracovávají odlišným způsobem.</p>\n<h2>Pozorovatel</h2>\n<p>Pozorovatel nebo posluchač se používá se tam, kde je mezi objekty vazba 1:N. Pokud se jeden objekt změní, pozorovatel o tom automaticky předá info závislým objektům. Je to jeden ze způsobů, jak dosáhnout reaktivity.</p>\n<h2>Singleton</h2>\n<p>Neboli jedináček je objekt třídy, která dovoluje pouze jedinou instanci. Výhoda je v tom, že se zabrání tvorbě velkého množství objektů, které by unavily a zpomalily server. Dále to zjednodušuje práci se zdroji jako jsou databáze nebo soubory na disku. Objektu se může vytvořit seznam úkolů a on je splní v daném pořadí. Změny se tak zapíšou a uloží a je jednodušší předcházet kolizi při zápisu změn.</p>',
        0, 0, 0),
       (41, 'Návrhové vzory v programování', 'navrhove-vzory-v-programovani', '2020-10-28',
        '<p>Design patterns had originally been categorized into 3 sub-classifications based on kind of problem they solve. Creational patterns provide the capability to create objects based on a required criterion and in a controlled way. Structural patterns are about organizing different classes and objects to form larger structures and provide new functionality. Finally, behavioral patterns are about identifying common communication patterns between objects and realize these patterns. </p>\n<h2>CREATIONAL</h2>\n<h3>Abstract factory</h3>\n<p>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</p>\n<h3>Builder</h3>\n<p>Separate the construction of a complex object from its representation, allowing the same construction process to create various representations.</p>\n<h3>Dependency Injection</h3>\n<p>A class accepts the objects it requires from an injector instead of creating the objects directly.</p>\n<h3>Factory method</h3>\n<p>Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p>\n<h3>Lazy initialization</h3>\n<p>Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as &quot;virtual proxy&quot;, an implementation strategy for the Proxy pattern.</p>\n<h3>Multiton</h3>\n<p>Ensure a class has only named instances, and provide a global point of access to them.</p>\n<h3>Object pool</h3>\n<p>Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns.</p>\n<h3>Prototype</h3>\n<p>Specify the kinds of objects to create using a prototypical instance, and create new objects from the \'skeleton\' of an existing object, thus boosting performance and keeping memory footprints to a minimum.</p>\n<h3>Resource acquisition is initialization</h3>\n<p>Ensure that resources are properly released by tying them to the lifespan of suitable objects.</p>\n<h3>Singleton</h3>\n<p>Ensure a class has only one instance, and provide a global point of access to it.</p>\n<h2>STRUCTURAL</h2>\n<h3>Adapter, Wrapper, or Translator</h3>\n<p>Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator.</p>\n<h3>Bridge</h3>\n<p>Decouple an abstraction from its implementation allowing the two to vary independently.</p>\n<h3>Composite</h3>\n<p>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p>\n<h3>Decorator</h3>\n<p>Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.</p>\n<h3>Extension object</h3>\n<p>Adding functionality to a hierarchy without changing the hierarchy.     No  No  Agile Software Development, Principles, Patterns, and Practices[16]</p>\n<h3>Facade</h3>\n<p>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</p>\n<h3>Flyweight</h3>\n<p>Use sharing to support large numbers of similar objects efficiently.</p>\n<h3>Front controller</h3>\n<p>The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests.</p>\n<h3>Marker</h3>\n<p>Empty interface to associate metadata with a class.     No  No  Effective Java[19]</p>\n<h3>Module</h3>\n<p>Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.</p>\n<h3>Proxy</h3>\n<p>Provide a surrogate or placeholder for another object to control access to it.</p>\n<h3>Twin</h3>\n<p>Twin allows modeling of multiple inheritance in programming languages that do not support this feature.</p>\n<h2>BEHAVIORAL</h2>\n<h3>Blackboard</h3>\n<p>Artificial intelligence pattern for combining disparate sources of data (see blackboard system).</p>\n<h3>Chain of responsibility</h3>\n<p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p>\n<h3>Command</h3>\n<p>Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations.</p>\n<h3>Interpreter</h3>\n<p>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</p>\n<h3>Iterator</h3>\n<p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p>\n<h3>Mediator</h3>\n<p>Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it allows their interaction to vary independently.</p>\n<h3>Memento</h3>\n<p>Without violating encapsulation, capture and externalize an object\'s internal state allowing the object to be restored to this state later.</p>\n<h3>Null object</h3>\n<p>Avoid null references by providing a default object.</p>\n<h3>Observer or Publish/subscribe</h3>\n<p>a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.</p>\n<h3>Servant</h3>\n<p>Define common functionality for a group of classes. The servant pattern is also frequently called helper class or utility class implementation for a given set of classes. The helper classes generally have no objects hence they have all static methods that act upon different kinds of class objects.</p>\n<h3>Specification</h3>\n<p>Recombinable business logic in a Boolean fashion.</p>\n<h3>State</h3>\n<p>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</p>\n<h3>Strategy</h3>\n<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p>\n<h3>Template method</h3>\n<p>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm\'s structure.</p>\n<h3>Visitor</h3>\n<p>Represent an operation to be performed on the elements of an object structure. Visitor lets a new operation be defined without changing the classes of the elements on which it operates.</p>\n<h2>CONCURRENCY</h2>\n<h3>Active Object</h3>\n<p>Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.</p>\n<h3>Balking</h3>\n<p>Only execute an action on an object when the object is in a particular state.</p>\n<h3>Binding properties</h3>\n<p>Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way.</p>\n<h3>Compute kernel</h3>\n<p>The same calculation many times in parallel, differing by integer parameters used with non-branching pointer math into shared arrays, such as GPU-optimized Matrix multiplication or Convolutional neural network.</p>\n<h3>Double-checked locking</h3>\n<p>Reduce the overhead of acquiring a lock by first testing the locking criterion (the \'lock hint\') in an unsafe manner; only if that succeeds does the actual locking logic proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.</p>\n<h3>Event-based asynchronous</h3>\n<p>Addresses problems with the asynchronous pattern that occur in multithreaded programs.</p>\n<h3>Guarded suspension</h3>\n<p>Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.</p>\n<h3>Join</h3>\n<p>Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model.    No  N/A</p>\n<h3>Lock</h3>\n<p>One thread puts a &quot;lock&quot; on a resource, preventing other threads from accessing or modifying it.</p>\n<h3>Messaging design pattern</h3>\n<p>Allows the interchange of information (i.e. messages) between components and applications.</p>\n<h3>Monitor object</h3>\n<p>An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.</p>\n<h3>Reactor</h3>\n<p>A reactor object provides an asynchronous interface to resources that must be handled synchronously.</p>\n<h3>Read-write lock</h3>\n<p>Allows concurrent read access to an object, but requires exclusive access for write operations.</p>\n<h3>Scheduler</h3>\n<p>Explicitly control when threads may execute single-threaded code.</p>\n<h3>Thread pool</h3>\n<p>A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern.</p>\n<h3>Thread-specific storage</h3>\n<p>Static or &quot;global&quot; memory local to a thread.</p>',
        0, 0, 0),
       (42, 'Lékařská diagnostika na dálku', 'lekarska-diagnostika-na-dalku', '2020-10-23',
        '<p>Mnozí z vás se možná již setkali se spoluprací s doktorem na dálku. Ať už kvůli snížení možnosti nakažení ostatních lidí nebo kvůli nedávnému zákazu vycházení.\n<br>\nVyrábějí se i různé aplikace, kde člověk může posoudit podle popisu symptomů, co se s ním asi děje. Podle toho si může najít informace o nejlepším možném postupu, jak postupovat, jak si ulevit doma svépomocí. Nebo se rozhodnout, zda-li je nutná akutní návštěva.\n<br>\nKdysi jsem četl knihu <strong>Miluj svůj život</strong> od <em>Louise L. Hay</em> a řekl jsem si, že udělám malou aplikaci podobného rázu. Informace vycházejí z doporučení autorky, která má netradiční přístup v porovnání s tradiční západní medicínou. Třeb vám její neobyčejný přístup k řešení vašeho problému pomůže.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/health_diagnostic/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/health_diagnostic\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (43, 'Lorem ipsum - plnění webu ukázkovým textem', 'lorem-ipsum-plneni-webu-ukazkovym-textem', '2020-10-23',
        '<p>Když děláte grafický návrh nebo webovou stránku, často potřebujete nějaký pseudo text, kterým zaplníte budoucí obsah. Ukázkový text zvaný <strong>lorem ipsum</strong> je možná starší, než si myslíte.\n<br>\nText připomíná latinu a je rozvržen tak, aby nepůsobil příliš nahodile a dobře zaplnil místo. Aby se dobře četl a písmena na sebe hezky navazovaly. Očím pak při pohledu na návrh přijde, že je dokument v pořádku.\n<br>\nAť už děláte vzor formuláře, hlavičkového dokumentu, aplikace nebo webové stránky bude se vám hodit.\n<br>\nVytvořil jsem aplikaci, kde si můžete zvolit délku textu až do 1000 znaků. A následně provést případně transformační úpravy (verzálky, kapitálky, vložení pomlček...). Pro zkopírování stačí jeden klik do textového pole.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/generator_lorem_ipsum/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/lorem_ipsum_generator\">Odkaz na zdrojový kód</a></p>\n<p>PS: ve zdrojovém kódu najdete soubor lorem.txt, kde je text umístěn, můžete si ho stáhnout a uchovat pro offline použití</p>',
        0, 0, 0),
       (44, 'Kde hledat programátora nebo novou práci', 'kde-hledat-programatora-nebo-novou-praci', '2020-10-23',
        '<p>Github je velká platforma, kterou odkoupil Microsoft. Slouží primárně jako repozitoře pro projekty (úložiště zdrojového kódu).\n<br>\nVedlejší funkcí je i možnost <a href=\"https://jobs.github.com\">vyhledávání pozic</a> souvisejících s programováním a IT. Pokud tedy hledáte, nebo naopak chcete najít, je to další z možností, jak oslovit (zejména zahraniční) pracovníky nebo kontraktory.\n<br>\nByl to pro mne vhodný zdroj, abych si vyzkoušel napojit se na jejich vyhledávací API. Vytvořil jsem zjednodušenou aplikaci, která vyhledává na základě klíčového slova, lokality a možnosti filtrování nabídek na plný úvazek.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/github_jobs/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/github_jobs_search_app\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (45, 'Každý vývojář by měl mít svůj katalog', 'kazdy-vyvojar-by-mel-mit-svuj-katalog', '2020-11-17',
        '<p>Jedna z nejhorších chyb při programování je programování náhodou, styl copy paste a vědomé opakování chyb z lenosti.</p>\n<h3>Programování náhodou</h3>\n<p>Je velmi nevhodná praktika, kdy programátor naivně nebo úmyslně pustí do produkce kód, protože &quot;jednou fungoval&quot;. Správné testování ale není o tom, že kód jednou uspěl a podruhé už třeba ne. Kód musí obstát vždycky a to opakovaně. Jedno spuštění testu navíc nezahrne dostatek podmínek a různých situací, které v aplikaci mohou nastat.</p>\n<h3>Programování stylem copy paste</h3>\n<p>Pokud máte svůj katalog, tak copy paste je záchrana, protože nemusíte hotové řešení vymýšlet znovu. A zároveň neporušujete zásadu, že kód nepouštíte do produkce bez ozkoušení nebo dokonce z neznámého zdroje. Proto by měl mít každý vývojář svůj archiv. Katalog, odkud může brát funkční a ověřené řešení na určitou problematiku.</p>\n<h3>Vědomé opakování chyb z lenosti</h3>\n<p>Je naopak udržování si chybného kusu kódu, protože například vím, že kód je použit na více projektech. A jeho náprava by tak vyžadovala přepsání na více místech a řadu testování. Pokud ale tento technický dluh budu před sebou stále tlačit vpřed a ještě ho zvětšovat, bude to čím dál náročnější opravit.</p>',
        0, 0, 0),
       (46, 'Jak se dá měřit index stresu', 'jak-se-da-merit-index-stresu', '2020-10-23',
        '<p>Stress je závažná věc. A jako s mnohým to se stresem funguje tak, že čeho je moc, toho je příliš. Nedávno jsem náhodou narazil na návštěvě na magazín, kde byla tabulka s indexy stresu a vyhodnocení. Tyto základní data jsem použil pro tvorbu jednoduché aplikace. V ní si můžete vybrat, co vás v podlení době potkalo a jak velký stres vám to může přinést.\nPokud vám vyjde velké číslo, ve vyhodnocení uvidíte odkaz na mou již publikovanou aplikaci, která vám pomůže uvolnit se pomocí jednoduchých dechových cvičení.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/stress_index/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/stress_index_app\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (47, 'Jak získat nové zákazníky', 'jak-ziskat-nove-zakazniky', '2020-10-27',
        '<ul>\n<li>Najdi klienta s technickým problémem (na sociálních sítích, mapě).</li>\n<li>Analyzuj jeho požadavky a zjisti, jestli je umíš splnit a vyřešit tak jeho problém.</li>\n<li>Promluvte si o ceně a termínu, jestli jste ve shodě.</li>\n<li>Domluvte si postup posílání beta verzí a náhledů.</li>\n<li>Udělej první návrh (skicu, drátový model, popis) a nech si to schválit zákazníkem.</li>\n<li>Po vystavení si řekni o referenci a pravidelně zákazníka oslov, jestli mu vše funguje, má zájem něco doplnit, dodělat.</li>\n</ul>',
        0, 0, 0),
       (48, 'Každý důležitý prvek by měl být zálohovaný', 'kazdy-dulezity-prvek-by-mel-byt-zalohovany', '2020-11-17',
        '<p>Repozitoře na principu verzování pomocí GITu jsou velmi šikovní pomocníci. Většinou jdou sehnat zdarma a v relativně rozsáhlé velikosti úložného prostoru. <strong>Nevyužít takového pomocníka na jakýkoliv, menší nebo větší projekt je chyba.</strong>\n<br>\nNěkolikrát se mi už stalo, že si člověk na testech ve škole nebo na přijímacím pohovoru neuložil svoji práci. Když mu po pár desítkách minut spadl program a on se jako malé dítě otočil na dohlížející osobu se slovy: mě to spadlo a přišel jsem o všechny data, ukazovalo to na jedinou věc. Podcenění potřeby ukládat a zálohovat jakákoliv data, která vytvářím, nebo s nimi nějak pracuji. A to jak zdroje, tak vlastní výsledky. <strong>Ponechání dat náhodě se prostě nevyplácí</strong>.\n<br>\nJá osobně si i malé projekty přidávám do repozitoře. Například JS projekty a PHP projekty atd. Nemám v nich jen zálohu a možnost na nich pracovat vzdáleně. Navíc mi i umožňují vidět jejich historii a případně jí vrátit. <strong>Pokud zatím neovládáte GIT, co nejrychleji to napravte. Změní vám to život.</strong></p>',
        0, 0, 0),
       (49, 'I v karanténě je dobré udržovat si smysl pro humor', 'i-v-karantene-je-dobre-drzet-se-smyslu-pro-humor',
        '2020-10-23',
        '<p>Nezapomínejte na pozitivitu. Nejlépe pomůže humor, ať už jste v jakékoliv situaci. Udělal jsem aplikaci, kde se zobrazí náhodný vtip o Chucku Norrisovi (text vtipu je v angličtině).</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/jokes_chuck_norris/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/jokes_chuck_norris\">Odkaz na zdrojový kód</a></p>\n<p>PS: Pro vývojáře: v adresáři sql/ je skript pro vymazání duplikátů z tabulky, užitečná věc.</p>',
        0, 0, 0),
       (50, 'Inspirace a motivace', 'inspirace-a-motivace', '2020-10-23',
        '<p>Hledáte-li inspiraci nebo motivační prohlášení, zde je najdete od osobností z celého světa, známých i neznámých. (texty jsou v angličtině)</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/quote_of_the_day/\">Odkaz na aplikace</a></p>\n<p><a href=\"https://github.com/psvoboda1987/quote_of_the_day\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (51, 'Izolace COVID a vaření doma', 'izolace-covid-a-vareni-doma', '2020-10-23',
        '<p>Situace s omezeným pohybem venku mnohé zaskočila, tak jsem udělal jednoduchou aplikaci, která vyhledává recepty. Po kliknutí na tlačítko se zobrazí jeden náhodný recept s obrázkem a často i video návodem. Texty jsou v angličtině. Jídla nejsou filtrována (vegetariánská atd.) ale stačí prostě zkusit štěstí několikrát a inspiraci máte hned.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/meal_finder\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/meal_recipe_finder\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (52, 'Jak jste na tom s pamětí', 'jak-jste-na-tom-s-pameti', '2020-10-23',
        '<p>Pamět je dnes velmi namáhaná. Přesto to byla, je a bude užitečná dovednost. Žijeme v tzv. informačním věku. Kdo má data a informace, má výhodu. Pamatovat si to ale vše dá někdy dost zabrat.\nVytvořil jsem si jednoduchou aplikaci, která vám dovolí si ve svém prohlížeči vytvořit dvoustranné kartičky. Na jedné straně uvidíte otázku a kliknutím otočíte na odpověď. Mnoho studentů tento způsob učení používá se skutečnými papírovými kartami. Jsou velmi vhodné na studium například cizích jazyků. Kdy máte na jedné straně slovo ve vašem rodném jazyce a na druhé straně v cizím jazyce, který se právě učíte.</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/memory_cards\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/memory_cards\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (53, 'Jak na uvolnění očí při práci s PC', 'jak-na-uvolneni-oci-pri-praci-s-pc', '2020-11-07',
        '<p>Pro optimální fungování očí je důležité především často mrkat. A nepodlehnout tak syndromu suchého oka, kdy podvědomě člověk zapomene mrkat dostatečně často při práci na PC.\n<br>\nAby si oči odpočinuly, potřebují alespoň několikrát za hodinu přeostři na delší vzdálenost. Dobrá pomůcka je 20-20-20. Každých 20 minut se podívám na vzdálenost 20 stop (cca 6 m) po dobu 20 vteřin. Zároveň to lze kombinovat se vstáním ze židle a prokrvení dolní části těla. Stačí si zapamatovat, že při pohledu na hodiny např. vždy v 20, 40 a v celou vstanu na 20 vteřin a uvolním si oči. Například se podívám na konec místnosti nebo z okna.\n<br>\nJe to vhodné i pro ty z vás, kteří používáte nějaký organizační nástroj na práci v intervalech. Pak si můžete zafixovat, že po skončení intervalu následuje ono uvolnění. Nebo můžete dojít k oknu a na oněch 20 vteřin pořádně vyvětrat.\n<br>\nDalší možností je změna pozorovací vzdálenosti. Jedna z možností, které se nabízí je zároveň dobrá pro vaše záda. Stačí si na chvíli sednout a kroužit páteří, procvičit ji, rozhýbat a tím oddalovat a přibližovat oči od obrazovky.\n<br>\nCvičit se dá i aktivněji. Očima můžete pomalu nebo rychleji kmitat zleva doprava, zhora dolů, diagonálně či kroužit na obě strany. Rozsah nebo úhel přitom můžete měnit.\n<br>\nVýborná věc je pořídit si na pracoviště karimatku a na minutu si alespoň jednou za hodinu lehnout na záda. Uvolníte tím páteř a na minutu můžete zavřít oči, nechat je opravdu odpočívat celou minutu bez zatížení. Navíc se při tom můžete skvěle uklidnit, vydýchat. Možná si při tom vzpomenete na něco, co jste chtěli udělat nebo dostane dobrý nápad.</p>',
        0, 0, 0),
       (54, 'Hlavní výhody a nevýhody Agile a Scrumu', 'hlavni-vyhody-a-nevyhody-agile-a-scrumu', '2021-12-10',
        '<p>Slovo agilní samo o sobě znamená především schopnost se obratně pohybovat. Nejít stále jen přímo vpřed. Ale reagovat na překážky a umět je obejít nebo přeskočit tak jako v gymnastice.</p>\n<h3>Hlavní zásady agilního vývoje software jsou:</h3>\n<ul>\n<li>Procesy a nástroje jsou důležité, ale důležitější je mít schopné lidi pracující v efektivním týmu</li>\n<li>Dobrá dokumentace dává lidem potřebné informace, ale prioritní je mít kvalitní produkt</li>\n<li>Spokojení uživatelé jsou důležitější než odškrtnuté body v seznamu požadavků</li>\n<li>Projektový plán je užitečný, ale hlavní je dostat se do cíle a reagovat na změny, když je to potřeba</li>\n</ul>\n<p>Léta zkušeností vývoje aplikací dala profesionálním vývojářům nadhled v tom, co je správné a vhodné dělat a <strong>na co se soustředit</strong>. Je to především:</p>\n<ol>\n<li>Průběžné dodávání funkčního softwaru uživateli</li>\n<li>Přijmout fakt, že změny zadání mohou přijít a nejspíš přijdou</li>\n<li>Dodávání verzí produktu je lepší týdně, než jednou za měsíc</li>\n<li>Bezprostřední a nejlépe denní spolupráce lidí zabývajících se obchodem a vývojáři je zásadní</li>\n<li>Projekty je nejlepší svěřit do rukou motivovaných jedinců, kteří si zaslouží důvěru</li>\n<li>Komunikace tváří v tvář je nejlepší formou předávání informací</li>\n<li>Funkční software je nejlepší měřítko postupu</li>\n<li>Udržitelné tempo vývoje je lepší než náhlé skoky</li>\n<li>Soustředění se na používání dobrého designu a vysoké technické kvality</li>\n<li>Jednoduchost - snaha o maximalizaci množství práce, která není třeba dělat</li>\n<li>Architektura, požadavky a design zajistí nejlépe autonomní tým</li>\n<li>Pravidelná týmová zpětná vazba na téma jak pracovat efektivněji a její praktikování</li>\n</ol>\n<h3>Výhody Agile obecně:</h3>\n<ul>\n<li>klient dostává průběžně funkční části a může je jednotlivě testovat a vyjadřovat se k nim</li>\n<li>tým nepromarní měsíc na něco, co nakonec uživatel odmítne a nemusí začít od začátku</li>\n<li>tým funguje samostatně, nepotřebuje zásahy od lidí z vedení, kteří nevědí nic o programování</li>\n<li>programátoři se snáze a rychleji domluví mezi sebou, protože se znají a vědí, kdo co dělá</li>\n<li>plánování dává prostor na průběžné zařazení bloků se zaměřením na včasné splácení technologického dluhu</li>\n<li>lidé v týmu sdílejí svoje postřehy a zkušenosti, pokud někdo udělá chybu, řekne o tom ostatním, aby se nepromarnilo víc času</li>\n</ul>\n<h3>A nyní některé nevýhody:</h3>\n<ul>\n<li>protože se aplikace vyvíjí postupně, může být složitější vytvořit dobrý design a ke konci se může stát, že je potřeba předělat již hotovou práci kvůli růstu systému a následkům, se kterými se nepočítalo</li>\n<li>v iteraci se občas některý use case vyřadí, čímž se ušetří práce, později se ale může ukázat, že o několik iterací dále začně dávat smysl</li>\n<li>práce na jednotlivých částech se může na několik iterací pozastavit a upřednostnit prioritnější části, výsledek je tak často rozkouskovaný a není jednoduché se znovu dostat \"do sedla\"</li>\n<li>agile je reakcí na práci v podmínkách, které se často mění a nejsou známy dopředu, často se tak stane že se původní odhad \"sekne\" o několikanásobek času k dokončení nebo není vůbec odhadnutelný, klient na to musí být připraven</li>\n<li>týmy sice fungují dobře mezi sebou, ale není vždy snadné dobře uchopit funkci product ownera, člověka, který zajiťuje, že produkt bude mít vše, co mít má a nebude mít, co mít nemá</li>\n<li>pokud má tým více projektů, vývojáři, kteří mají v iteraci více volného času jsou často nuceni věnovat se jiným projetům místo toho, aby pomohli kolegům dotáhnout dluh v rámci dané iterace</li>\n</ul>',
        0, 0, 0),
       (55, 'Datová struktura typu pole je užitečný nástroj', 'datova-struktura-typu-pole-je-uzitecny-nastroj',
        '2020-10-23',
        '<p>Pole je jednou z nejužitečnějších datových struktur. Zejména JavaScriptové funkce .map(), .filter(), .sort(), .sum(), .any(), .all() a smyčky typu for..in, for..of a forEach. S jejich použitím se dají zpracovávat data pro většinu potřeb webové stránky nebo aplikace. Práce s poli je relativně rychlá a jednoduchá.\nVytvořil jsem cvičnou aplikaci, kde si načtu 3 uživatele z API. A tlačítky můžu provádět operace využívající zmíněné funkce. Snadno tak lze sečíst například investice všech uživatelů, seřadit je podle výše zisku, vyfiltrovat uživatele, kteří na svém kontě překročili milion, nebo zdvojnásobit jejich vklad. Zejména tu poslední funkci bych rád použil na svém bankovním účtu :-)</p>\n<p><a href=\"http://aplikace.svobodaweb.cz/app/top_users/\">Odkaz na aplikaci</a></p>\n<p><a href=\"https://github.com/psvoboda1987/array_functions_users_list\">Odkaz na zdrojový kód</a></p>',
        0, 0, 0),
       (56, 'Definice finančních pojmů v podnikání', 'definice-financnich-pojmu-v-podnikani', '2020-10-28',
        '<h2>Jakou formou je možné vydělat peníze</h2>\n<h3>HPP - Hlavní pracovní poměr</h3>\n<h3>DPP - Dohoda o provedení práce</h3>\n<h3>DPČ - Dohoda o pracovní činnosti</h3>\n<h3>OBZP - Osoba bez zdanitelných příjmů</h3>\n<ul>\n<li>Student starší 26 let</li>\n<li>Zaměstnanec na DPP do 300 hodin za rok a s příjmy do 10000 Kč.</li>\n<li>Osoba s příjmy do 10 000 Kč neevidovaná na Úřadě Práce</li>\n<li>Žena v domácnosti, která není na mateřské dovolené</li>\n</ul>\n<h3>OSVČ - Osoba samostaně výdělečně činná</h3>\n<p>Jak na to, aby to bylo legální (ne Švarc systém):</p>\n<ul>\n<li>klient mě nekontroluje a neorganizuje mou práci</li>\n<li>používám převážně vlastní nástroje</li>\n<li>pracuji alespoň pro 2 klienty</li>\n<li>pracuji převážně ve vlastních prostorách</li>\n<li>nemám pevnou pracovní dobu stanovenou klientem</li>\n<li>ideálně se obor mého podnikání liší od klientova</li>\n<li>do příjmů 1 000 000 Kč ročně nejsem plátce DPH</li>\n<li>odpočty a daně odvádím paušálem dle činnosti mého podnikání nebo dle reálných výdajů</li>\n<li>do reálných výdajů si mohu započíst sponzoring, pronájem místnosti pro obchodní jednání, reklamní katalogy, cestovní náklady, reklamní nespotřební předměty s logem a do 500 Kč</li>\n</ul>\n<h3>Nahodilý příjem</h3>\n<ul>\n<li>nesouvisle prováděná činnost (občasně, nárazově) např. prodej ořechů ze zahrady</li>\n<li>není oborem mého podnikání (pokud podnikám)</li>\n<li>není z pronájmu nebo úroků</li>\n<li>příjem je max. 10000 Kč</li>\n</ul>',
        0, 0, 0),
       (57, 'Funkcionální programování', 'funkcionalni-programovani', '2020-12-10',
        '<h1>Funkcionální programování</h1>\n<p>Funkcionální programování má dvě hlavní zásady.</p>\n<ol>\n<li>píšeme čisté, samostatné funkce</li>\n<li>vyhýbáme se způsobování vedlejších efektů a mutací</li>\n</ol>\n<h2>Čisté funkce</h2>\n<p>Nemají žádný vedlejší efekt a jsou stálé, tedy dávají za všech okolností stejné výsledky. 2 + 2 jsou vždy 4. Nezapisujeme tedy změnu nějakého stavu aplikace. Výhody jsou snadná testovatelnost (nemusíme nastavovat nějaké konkrétní podmínky).</p>\n<h2>Funkce vyššího řádu</h2>\n<p>Funkce vyššího řádu jsou takové funkce, které pracují s funkcí na vstupu nebo ji vrací na výstupu (případně obojí). Typické příklady jsou filter(), map(), reduce(), any(), all(), ...</p>\n<h2>Omezení mutací</h2>\n<p>Pokud na začátku získáváme data z databáze a následně s nimi potřebujeme nějak pracovat abychom dostali výsledky, uložíme si výstup z čistých funkcí do nové proměnné. <strong>Nepřepisujeme</strong> původní data. Zjednodušuje nám to testování (<strong>dohledatelnost</strong>) a <strong>předvidatelnost</strong> aplikace. Celý kód je tak více <strong>transparentní</strong> a je možné zalogovat si průběh programu a zjistit, kdy dostáváme jaká data aniž bychom o ně postupně přišli změnou jejich hodnoty nebo typu.</p>\n<h2>Rekurze</h2>\n<p>Rekurze je opakování funkce. Zavoláním sebe sama uvnitř definice může funkce vyřešit komplexní problém rozdělením na několik podproblémů stejného typu. Je ale potřeba správně nastavit podmínku (pojistku) proti zacyklení. Příkladem může být časový odpočet, kdy si nastavím od kolika chci počítat směrem dolů a například 0 jako koncový stav. Výhody jsou v některých případech jednodušší zápis, rychlejší zpracování (na některých datových strukturách)</p>\n<h2>Konverze argumentů 1:1</h2>\n<p>Je technikou rozfázování funkce s více argumenty na N počet funkcí s jediným argumentem. Je to výhodné, pokud funkci používáme několikrát a po nějaké době najdeme chybu a potřebujeme ji opravit. Nemusíme tak opravovat všechny výskyty, stačí opravit původní vstup. Když si např. chceme sestavit rozpočtovou aplikaci a zadáme dobře položky, které potřebujeme nakoupit, zjistíme kolik peněz nám na konci bude přebývat nebo chybět. Abychom nemuseli opravovat vše, opravíme jen vstupní parametr, výši rozpočtu. A podobně jako v excelu nám na to stačí změnit jedinou buňku.</p>\n<h2>Částečná aplikace</h2>\n<p>Pokud neznáme všechny vstupní paramerty na začátku, můžeme vrátit funkci, která při zavolání doplní zbylé parametry. Příkladem by mohla být dražba. Nastavíme nějakou základní vyvolávací cenu a umožníme každému účastníkovi k základu přihodit určitou částku. Nevíme přesně, kolikrát bude zájemci přihozeno, vždy tak vytvoříme novou funkci, která k aktuální částce přihodí sumu, kterou si danný účastník zvolí. Nejvyšší nabídka vyhrává.</p>\n<h2>Kompozice</h2>\n<p>Funkce se dají snadno spojovat. Tímto způsobem pracuje většina Unixových systémů. Můžeme například zadat: druháMocnina(sečti(2, odečti(4, 1)). Výsledek je 25 (2 + (4-1)^2.</p>',
        0, 0, 0),
       (58, 'Co si rozmyslet před pořízením webu', 'co-si-rozmyslet-pred-porizenim-webu', '2020-10-23',
        '<p>Chcete mít webové stránky? Pak je tu řada otázek, na které byste měli mít jasné odpovědi. Ušetříte se tak nepříjemností jako jsou nepřiměřená očekávání (zejména termíny kdy budou stránky hotové a kdy přinesou první úspěchy).</p>\n<h3>Co je určitě dobré vědět, než se do něčeho takového pustíte?</h3>\n<ul>\n<li>K čemu mají stránky sloužit? Jaké máte očekávání? <br>(např. prezentace vaší firmy / nabídka služby / prodej produktů)</li>\n<li>Jaké jsou vaše osobní cíle? Co o vás mají stránky prozradit? <br>(např. ukázat reference a galerie z uskutečněných zakázek a získat si tak důvěru u nových zákazníků)</li>\n<li>Váš finanční limit (např. 10 000 za hotový web a 5 000 na reklamu do začátku)</li>\n<li>Datum uvedení do provozu</li>\n<li>Potřebujete i překlad do cizího jazyku?</li>\n<li>Bude se obsah stránek často měnit?</li>\n<li>Chcete-li přidávat další obsah, kdo to bude dělat? Vy, někdo z vaší firmy, agentura...</li>\n<li>Chcete sbírat kontakty a rozesílat zájemcům pravidelné mailové zprávy?</li>\n<li>Máte připravené informace, které chcete na webu zobrazit nebo potřebujete aby to někdo pro vás sepsal?</li>\n<li>Máte přibližnou představu jak by měl web vypadat, jak by měl být rozčleněn<br>(nebo alespoň referenci na web, který je vám v tomto směru sympatický)</li>\n</ul>\n<p>Všechny tyto a některé další faktory ovlivní, jak dlouho se bude web navrhovat, vyvíjet, konfigurovat, testovat a ladit. A podle toho bude vypadat i jeho cena.\nZnámé pořekadlo tvrdí: &quot;<strong><em>Štěstí přeje připraveným.</em></strong>&quot;</p>',
        0, 0, 0),
       (59, '10 nejčastějších bezpečnostních rizik webových aplikací',
        '10-nejcastejsich-bezpecnostnich-rizik-webovych-aplikaci', '2021-12-10',
        '<ol>\n<li>SQL Injection (spuštění příkazu přes nezabezpečený vstup např. na formuláři)</li>\n<li>Chyba v autentikaci (odcizení klíče, tokenu, session údajů)</li>\n<li>Nedostatečně zabezpečná citlivá data (rodná čísla, kreditní karty...)</li>\n<li>XML externí entity (XXE)</li>\n<li>Nastavení přístupu (omezení, kam může uživatel zasahovat)</li>\n<li>Bezpečnostní konfigurace (např. 404 a 500 exeption, které dávají informace o použitém software)</li>\n<li>Cross site scripting (XSS - ukradení session, přesměrování na pirátský klon stránky)</li>\n<li>Nezabezpečená deserializace (může vést ke spuštění cizího kódu)</li>\n<li>Používání nestabilních komponent třetí strany (Wordpress)</li>\n<li>Nedostatečné logování a monitoring (pokud o útoku nikdo neví, útočník má víc času)</li>\n</ol>\n<p>Data vyplývají ze statistik OWASP nadace (Open Web App Security Project)</p>',
        0, 0, 0),
       (60, 'Agilní scrum', 'agilni-scrum', '2020-12-10',
        '<p>Některé metody, které se používají při řízení projektů můžete aplikovat i v malých osobních projektech. A nemusíte být zrovna součástí nějakého týmu.</p>\n<h2>Včasné a průběžné dodávání verzí</h2>\n<p>I malý projekt má určité kroky. A ty se dají rozepsat na jednotlivé celky nebo úkony. Řekněte si třeba, že 1x týdně uděláte vydání (deploy), které bude vždy lepší než to předchozí a zároveň bude o krok blíž ke konečnému cíli.</p>\n<h2>Testování demoverzí</h2>\n<p>Zapiště si zpětnou vazbu, ať už k vašemu testování, automatizovanému testování nebo výsledky někoho dalšího, kdo dostal vydanou verzi do ruky k ozkoušení.</p>\n<h2>Sledování pokroku a měření času</h2>\n<p>Jestli použijete kartičkový systém jako je Trello nebo Todo list je jedno. Důležité je mít seznam toho, co je potřeba udělat a měřit čas, který jste na tom strávili a zároveň tak získali přibližnou informaci o tom, jak dlouho vám to ještě bude trvat. Výsledky si můžete zobrazit v tabulce, grafu nebo číslech. Ať už používáte systém spalování nebo budování, uvidíte, jak se vám proces daří řídit.</p>\n<h2>Každý sprint má svoji review</h2>\n<p>Sepiště si, co se podařilo, co šlo snadno a kde naopak byly problémy. Uložte si abstraktní řešení i konkrétní příklady do archivu a zapiště si tipy a poznámky, jak se vám podařilo problémy, které jste po cestě potkali vyřešit. Příště už budete mít kam sáhnout a odkud čerpat.</p>\n<h2>Udělejte si čas na refactoring</h2>\n<p>Věci, které se dělají více než jednou je vhodné zabalit do obecné funkce a spustit tam, kde je potřeba.</p>\n<h2>Pravidelná komunikace se zákazníkem</h2>\n<p>Předejte upřímné informace o tom, jak se vám daří. Co je hotovo, co chybí a co bude příště. Promluvte si o požadavcích na příští sprint. A postupně si odškrtávejte části, kde je zákazník spokojený se současným stavem. I kdyby měl být projekt neziskový, první lidé, kteří budou vaši aplikaci testovat nebo používat by měli dát čerstvou zpětnou vazbu.</p>\n<h2>Nechte si menší rezervu</h2>\n<p>Jak v každém dni tak v celém projektu. Plánujte si cca 80% pracovního času. Nechte si rezervu právě kvůli dodatečnému testování, odpočinku, řešení problémů, vyhledávání informací a dodatečném vzdělávání se. Odevzdávat práci na poslední chvíli znamená risk. Nejde o to, kolik chyb máte v aplikaci, ale o to, kolik jich stihnete odladit předtím, než ji předáte zákazníkovi. Jde o jeho dojem.</p>\n<h2>Logujte chyby</h2>\n<p>A veďte si záznamy o tom kdy a jak byly vyřešeny. Zkontrolujte si, jestli se objevily znovu.</p>\n<h2>Vždy se ujistěte, že dobře chápete zadání</h2>\n<p>Nejefektivnější managementová metoda je eliminace zbytečné práce. Navíc je důležité chápat kontext aplikace, např. pro koho ji vyrábíte a jak se s ní bude nakládat. Často totiž dostanete požadavek udělej tohle, ale když se zeptáte proč to po vás zadavatel chce, řekne důvod, který s požadavkem téměř nesouvisí. Je proto důležité zpracovávat úkoly způsobem, který zajistí, že to, co naprogramujete vyřeší opravdovou potřebu, ne jen větu v Todo listu.</p>',
        0, 0, 0),
       (61, 'Value Objekt a jeho využití', 'value-objekt-a-jeho-vyuziti', '2022-06-02', 'Value Objekt', 0, 0, 1),
       (62, 'Value Object a jeho využití', 'value-object-a-jeho-vyuziti', '2022-06-02',
        '<h3>Co to je?</h3>\n<p>Value Objekt je stručně řečeno objekt vytvořený pro kontrolu dat a jejich validní držení a zpracování.</p>\n<h3>Jak to funguje?</h3>\n<p>V ideálním případě funguje tak, aby už jen samotné vytvoření splnilo veškeré potřebné validace. A zároveň, aby nebylo možné vytvořit nevalidní objekt a nastavená pravidla obejít.</p>\n<h3>K čemu to je?</h3>\n<p>Místo toho, abych na x místech v kódu dělal různé validace a riskoval, že na některou někde zapomenu mohu si například vytvořit funkci validateOrderData() která bude kontrolovat formát emailu, telefonu zákazníka, vyplnění (min. délku) různých dat před vložením do databáze. Zajistím si tak, že na nic nezapomenu a že nebudu jednotlivé validace opakovat a vytvářet duplicitní logiku pro stejný cíl.</p>\n<p>K tomu lze ale přistopit různými způsoby. Funkce mi může vracet boolean, pokud jsou data ok. Nebo může uvnitř hodit vyjímku, případně data zkusit opravit, nebo zalogovat, odeslat varovný signál, mail atd. Vhodnější je vytvořit objekt dat, která jsou validní. Ale funkce nám neumožní např. přistoupit k některým vnitřním konstantám atd. Proto je vhodná třída, která tyto věci umí.</p>\n<h3>Jak na to?</h3>\n<ul>\n<li>privátní konstruktor, kam jdou všechny závislosti a kde se řeší všechny validace a setování povinných properties</li>\n<li>žádné settery, žádné rozšiřování (final)</li>\n<li>privátní properties a public gettery</li>\n<li>tvorba přes public static factory metodu (fromValues, fromString, fromInt atd.)</li>\n</ul>\n<h3>Příklad</h3>\n<div class=\"code\">\n<p>final class OrderData<br />{<br />    private function __construct(private $email, private $tel, private $items, private $price)<br />    {<br />        // aserce: validní email<br />        // aserce: validní telefon<br />        // aserce: min 1 položka<br />        // aserce: cena objednávky &gt; 0 Kč<br />    }</p>\n<p>    public static function fromValues(string $email, $tel, array $items, int $price): OrderData<br />    {<br />        return new self($email, $tel, $items, $price);<br />    }</p>\n<p>    public function getEmail()<br />    {<br />        return $this-&gt;email;<br />    }</p>\n<p>    public function getTel()<br />    {<br />        return $this-&gt;tel;<br />    }</p>\n<p>    public function getItems()<br />    {<br />        return $this-&gt;items;<br />    }</p>\n<p>    public function getPrice()<br />    {<br />        return $this-&gt;price;<br />    }<br />}</p>\n</div>\n<h3>Výhody</h3>\n<ul>\n<li>striktně typované</li>\n<li>preferuje doménové koncepty (User, Address, Order, Procut) místo primitivních hodnot (string, int)</li>\n<li>nepotřebuje komentáře a vysvětlování</li>\n<li>immutable (nelze po vytvoření ovlivnit)</li>\n<li>pure (stejné zadání vrátí stejný objekt)</li>\n<li>lze vzájemně spojovat a tím zjednodušuje kód</li>\n<li>validaci si vyřeším jednou, na jednom místě a od té doby neřeším (set it and forget it)</li>\n</ul>\n<h3>Použití</h3>\n<div class=\"code\">\n<p>$address = Address::fromValues($street, $city, PostalCode::fromInt($postalCode), Country::fromString($country));<br />$user = User::fromValues($name, $surname, $address, Email::fromString($email), PhoneNumber::fromValues($code, $number));<br />$this-&gt;registrationService-&gt;saveUser($user);<br />$products = $this-&gt;db-&gt;getProducts($this-&gt;getBasketItems());<br />$order = new Order($user, $products);<br />$this-&gt;orderService-&gt;processOrder($order);</p>\n</div>\n<h3>Value object není</h3>\n<ul>\n<li>data transfer object (mapování a seskupení relevantních dat - formulář, JSON, XML atd.)</li>\n<li>reference object (entita/row z DB - už z principu normativních forem nemůžou být 2 stejné)</li>\n</ul>',
        0, 0, 0),
       (63, 'Value Objekt a jeho využití', 'value-objekt-a-jeho-vyuziti', '2022-06-02',
        'Value Objekt je stručně řečeno objekt vytvořený pro kontrolu dat a jejich validní držení a zpracování. Funguje tak, aby už jen samotné vytvoření splnilo veškeré potřebné validace.',
        0, 0, 1),
       (64, 'REST API tipy z praxe', 'rest-api-tipy-z-praxe', '2022-06-02',
        '<h2>Základní desatero</h2>\n<p>1. JSON request JSON odpověď</p>\n<p>2. V endpointech používejte podstatná jména v plurálu př.: /books, /articles, /users</p>\n<p>3. Slovesa jsou CRUD metody (GET, POST, PUT, DELETE)</p>\n<p>4. Vnořte endpointy logicky do sebe př.: /articles je výpis, /articles/id je detail, /articles/id/comments je výpis komentů pro daný článek</p>\n<p>5. Vraťte standardní chybové kódy a poskytněte informace o možných řešeních</p>\n<p>6. Povolit filtrování, řazení, stránkování (snižuje datové průtoky) př.: /users?lastName=Smith</p>\n<p>7. Bezpečnost (SSL/TLS)</p>\n<p>8. Kešujte data</p>\n<p>9. Verzujte API př.: /v1, /v2</p>\n<p>10. Poskytněte dokumentaci a poslechněte si návrhy a žádosti uživatelů</p>\n<h2>Metody</h2>\n<h3>GET</h3>\n<p>Pouze pro vyžádání dat (nemá tělo), parametry jsou v url</p>\n<h3>POST/PUT</h3>\n<p>Odesílá data na server obvykle pomocí `application/x-www-form-urlencoded`. Většinou v páru klíč-&gt;hodnota jako př.: jméno=petr, příjmení=svoboda. Nebo jako `multipart/form-data`, př.: jméno=petr&amp;příjmení=svoboda. API může přijmout požadavek jen jednou (PUT) nebo (teoreticky opakovaně) POST.</p>\n<h3>DELETE</h3>\n<p>požaduje smazání na serveru (202 přijato, 204 žádný obsah)</p>',
        0, 0, 0),
       (65, 'Defenzivní programování', 'defenzivni-programovani', '2022-06-02',
        '<p>Defenzivní programování je stejné jako defenzivní řízení auta. Uvědomujete si, že kdokoliv může kdykoliv udělat chybu, nespoléháte na zázraky a nejste naivní. Lidé chybují, protože jsou unavení, nedávají pozor, něco je vyruší, přinutí dokončit práci rychleji, nepochopí správně zadání. Důvodů je mnoho. Je potřeba s tím počítat jako s nevyhnutelným faktem a dávat si prostě při práci pozor na to, co dělám, čemu důvěřuji a jestli ta důvěra je opodstatněná nebo něčím otestovaná.</p>\n<h2>Základní zásady (stručně)</h2>\n<ul>\n<li>použití value object - nelze vytvořit jinak, než validně</li>\n<li>abstrakce je znovu použitelná, kód nikoliv</li>\n<li>neměnný (immutable) stav (PSR-7) a zapouzdřený (private)</li>\n<li>žádné veřejné settery -&gt; pouze konstruktor (žádné volitelné závislosti)</li>\n<li>žádná neinicializovaná vlastnost (potřebujete ji nebo ji vyhodíte)</li>\n<li>třída je final standardně, metody a prvky jsou standardně private, pokud není potřeba jinak</li>\n<li>zakázat klonování, serializaci např. pomocí use UnseriazableTrait dokud to nebudete potřebovat (v tom případě nejprve řádně otestujte)</li>\n<li>typy zadávejte co nejpřesněji (ideálně žádné smíšené nebo neotypované prvky)</li>\n<li>fluent rozhraní poskytují spoustu možností jak řešit 1 úkon (lepší je někdy mít 1 možnost, i když je kód o trochu delší)</li>\n<li>nedůvěřujte žádnému kódu (nejdříve si ho přečtěte a otestujte, zejména před nasazením na produkci)</li>\n<li>Unit testy na všechny scénáře (pokud uděláte poctivě, budete od té chvíle razit heslo: \"raději méně funkcí, méně problémů a méně potřebných testů\")</li>\n</ul>',
        0, 0, 0),
       (66, 'Jak obejít CRON limit', 'jak-obejit-cron-limit', '2022-06-02',
        '<p>Máte webhosting a používáte automatické spouštění skriptů pomocí Linux nástroje CRON? Pokud máte nastavený limit, např. 3 skripty celkem a max. 1x volání / hod není to řešitelné jen dalším poplatkem na zvýšení limitu. Stačí to kreativně obejít. Není to dokonalé řešení, ale je jednoduché a funkční. Spočívá v asynchroním zavolání seznamu skriptů jeden po druhém.</p>\n<p>nastavím si volání např. v bash/cron.php, ve skriptu bude něco jako:</p>\n<div class=\"code\">$seznamUrl = [ ‘url/skript1’, ‘url/skript2’, ‘url/skript3’, ‘url/skript4’ ];</div>\n<div class=\"code\">$client = new Guzzle();</div>\n<div class=\"code\">foreach ($seznamUrl as $url) {   </div>\n<div class=\"code\">  $client-&gt;request($url, ‘GET’);</div>\n<div class=\"code\">} </div>',
        0, 0, 0),
       (67, 'Monáda', 'monada', '2022-06-02',
        '<p>Monáda je funkce zjednodušující řešení častých úkonů, používaná zejména při řešení chybějících hodnot a obalování výsledků nebo spojování (pipeline) datových toků. Je podobná wrapperu (řeší některé závislosti).</p>\n<p>příklad:</p>\n<p>// jednoduché zpracování</p>\n<p>$input = getInput();</p>\n<p>function double($input) {</p>\n<p>  return 2 * $input;</p>\n<p>}</p>\n<p>// pokud by ale operací bylo více, je vhodné logovat si, co se se vstupem dělo</p>\n<p>class LoggedValue {</p>\n<p>  public $log = [];</p>\n<p>  public __construct(private $value, private $logMessage) {</p>\n<p>    $this-&gt;log[] = $logMessage;</p>\n<p>  }</p>\n<p>}</p>\n<p>// díky vnitřnímu logu nepřijdeme o historii původního vstupu</p>\n<p>$input = new LoggedValue($input, \"initialized with $input\");</p>\n<p>function doubleWithLogs(LoggedValue $value) {</p>\n<p>  $value-&gt;value *= 2;</p>\n<p>  $value-&gt;log[] = \"doubled $value and returned {2 * $value}\";</p>\n<p>   return $value;</p>\n<p>}</p>',
        0, 0, 0),
       (68, 'Práce s null hodnotou', 'prace-s-null-hodnotou', '2022-06-02',
        '<h2>Zásady pro (ne)použití null</h2>\n<p>- nevracejte null, když dojde k chybě, vyvolejte výjimku (a použijte try-catch) nebo zastavte běh skriptu</p>\n<p>- vraťte [], ‘’, {} v závislosti na očekávaném typu</p>\n<p>- nekontrolujte null jako způsob primitivního testování</p>\n<p><strong>příklad</strong>:</p>\n<div class=\"code\">\n<p>// logování a validaci je snazší vyřešit uvnitř funkce (centralizované a DRY)</p>\n<p>$data = $this-&gt;getData();</p>\n<p>// pokud vrátím null musím ručně validovat<br />if (!$data) {<br />    // něco s tím udělat tady<br />}</p>\n<p>// pokud vrátím [] není třeba dělat check, foreach neproběhne a nerozbije program</p>\n<p>foreach ($data as $row) {<br />    $result[] = $this-&gt;processRowData($row);<br />}<br />return $result;</p>\n</div>\n<h2>Null object</h2>\n<p>je podobný přístup jak se vyhnout zbytečnému prověřování a zároveň zamezit rozbití programu</p>\n<p><strong>příklad</strong>:</p>\n<div class=\"code\">\n<p>$user = $this-&gt;getUser($values);</p>\n<p>šablona:</p>\n<p>// pokud např. DB nic nevyhledá a my si nic neověříme, máme tu error</p>\n<p>&lt;p&gt;{$user-&gt;getName()}&lt;/p&gt;</p>\n<p>&lt;p&gt;{$user-&gt;getEmail()}&lt;/p&gt;</p>\n</div>\n<p>řešení:</p>\n<div class=\"code\">\n<p>function getUser($values) {</p>\n<p>  $user = $this-&gt;userFacade-&gt;getUser($values);</p>\n<p>    return $user ?? new NullUser();</p>\n<p>}</p>\n<p>class NullUser{</p>\n<p>  function __construct() {}</p>\n<p>  function getName() {return \'Null User\';}</p>\n<p>  function getEmail() {return \'null@user.com\';}</p>\n<p>  function isNull() {return true;}</p>\n<p>}</p>\n</div>',
        0, 0, 0),
       (69, 'Slabá místa PHP', 'slaba-mista-php', '2022-06-03',
        '<h2>PHP má své nevýhody a slabiny</h2>\n<p>Není to nejbezpečnější jazyk, ale s jedním z top 3 frameworků se bezpečnost zásadním způsobem zlepšuje.</p>\n<p>Má nekonzistentní parametry nativních funkcí (přehozený haystack, needle -&gt; needle, haystack). Ale s kvalitním IDE které napovídá pořadí to není problém. Případně se dají udělat helpery pro zajištění zpětné kompatibility.</p>\n<h3>O PHP se píše spousta věcí, např. že</h3>\n<ul>\n<li>má špatný návrh</li>\n<li>pohání 2/3 webů (cca 1/2 webů je dělaných na PHP CMS jako je WordPress)</li>\n<li>je to jazyk pro amatéry a patlaly</li>\n<li>nemá nejlepší syntax a je jednoduché v něm psát nekvalitní kód</li>\n<li>na něm běží youtube a facebook.</li>\n</ul>\n<p>Ano, PHP je skvělé na rychlé a kvalitní prototypování. Pracuje se s ním rychle a jednoduše. Nepotřebuje kompilaci a v praxi je dost rychlé, nezabírá moc paměti ani výkonu. Ale celý facebook na něm rozhodně neběží. A to, co v něm kdysi možná bylo napsáno už je pravděpodobně pryč nebo nahrazeno něčím jiným.</p>\n<p>Jeho návrh není nejlepší. Některé podstatné vlastnosti se do něj dostaly až v posledních pár letech. Sám jsem začal až na PHP 7. A jsem za to hodně vděčný.</p>\n<p>Bez frameworku (vlastního nebo open source) to může svádět ke kombinaci SQL, HTML a PHP v jediném souboru. Ale o to více se člověk naučí a posune, když dokáže něco vytvořit v PHP a zachovat to funkční, testovatelné, srozumitelné a udržitelné.</p>\n<p>Typování je věc vlastního rozhodnutí, což umožňuje právě tu rychlost prototypování prvního návrhu na začátku a postupné doladění a doplnění testů při refaktoringu.</p>\n<p>Ano, běží na něm spousta webů a většina z nich jsou velmi základní. Wordpress má a měl za svou historii velkou spoustu zranitelností. Zejména přes slabě vyřešené doplňky.</p>\n<p>Přesto jeho nevýhody nejsou tak velké jako u jiných jazyků a dá se s nimi pracovat a fungovat. Je to dobrý jazyk na začátek s programováním. Je snadné se s ním naučit pracovat se soubory, databází, šablonami, cookies, session, POST a GET, formuláři.</p>\n<p>Často se setkávám s tím, že nejde o jazyk, ale o porozumění byznys logiky, cíle úkolu, smyslu zadání, většímu kontextu a vedlejších efektů. Naučení se hledat chyby a odstraňovat je správným způsobem. A pokud programátor umí správně své řešení navrhnout a otestovat, nejde o to, jesli píše v Javě, Javascriptu atd.</p>\n<p>Ostatní jazyky mají také spoustu nepříjemných vad. V Pythonu často trvá stejná funkce delší dobu, nelze očima najít chybu v odsazení řádků nebo rozdíl mezi tabem a mezerou. Java je jako ženská - ukecaná, náročná na paměť a myslí si, že ví líp než ty, co vlastně chceš. Koho baví místo } psát v Ruby neustále dokola end end end? Javascript je přehlcen knihovnami a frameworky. Složka node_modules má větší gravitační pole než bílý trpaslík. React mi přijde jako obchodní společnost, v každém souboru je import a export. Potřebuju se navíc naučit pracovat s typescriptem a JSX.</p>',
        0, 0, 0),
       (70, 'Bordel v kódu', 'bordel-v-kodu', '2022-06-11',
        '<p>Mess detector je další z diagnostických nástrojů speciálně pro PHP. Podobně jako Codesniffer hledá slabá místa v kódu a to z několika úhlů pohledu.</p>\n<h2>Správné zásady</h2>\n<h3>SOLID principy</h3>\n<ul>\n<li>Single responsibility - metoda nebo třída řeší 1 věc</li>\n<li>Open/Close - do otestovaného kódu můžeme přidávat, ale ne odebírat nebo upracovat</li>\n<li>Liskovové nahrazování - potomek třídy musí umět vše co umí rodič</li>\n<li>Interface segregation - lépe rozdělit interface na specifické použití než mít vše v jednom</li>\n<li>Dependency inversion - abstrakce má přednost před konkrétním</li>\n</ul>\n<h3>Objektová kalistenika</h3>\n<ol>\n<li>Nízká míra odsazení</li>\n<li>Return nebo Null Objekt místo else</li>\n<li>Použití value objektů místo primitivních hodnot</li>\n<li>Využít enumy na vytvoření kolekcí místo jejich hromadění ve třídě</li>\n<li>Řetězené metody každá na vlastní řádek</li>\n<li>Nepřehánět to ani se zkracováním ani doslovností jmén proměnných a metod</li>\n<li>Třídy a entity vytvářet pokud možno krátké</li>\n<li>Udržet na uzdě dependencies uvnitř třídy</li>\n<li>Privátní settery</li>\n</ol>\n<ul>\n<li>Omezit statický přístup</li>\n<li>Používat Importy pomocí use xy</li>\n<li>Nepřiřazovat hodnoty v if ()</li>\n<li>Využít strict flag tam, kde to jazyk umožňuje</li>\n<li>Boolean v parametru funkce naznačuje porušení Single responsibility</li>\n</ul>\n<h2>Velikost</h2>\n<ul>\n<li>Rozdělit metodu, pokud obsahuje moc if, for, switch, parametrů atd.</li>\n<li>Rozdělit třídu nebo metodu, pokud je příliš dlouhá, má příliš moc metod nebo properties</li>\n</ul>\n<h2>Jména</h2>\n<ul>\n<li>omezit příliš dlouhé nebo nesrozumitelně krátké názvy</li>\n<li>metody, které vrací bool nazvat spíš isX() nebo hasX() místo getX()</li>\n</ul>\n<h2>Design</h2>\n<ul>\n<li>vyhnout se exit, goto, eval, count ve smyčce, prázdným catch blokům, var_dump v produkci atd.</li>\n<li>omezit dědičnost a počet potomků na rozumnou míru</li>\n</ul>\n<h2>Nepoužitý kód</h2>\n<ul>\n<li>ať už lokální proměnné, privátní metody, properties nebo parametry</li>\n</ul>',
        0, 0, 0),
       (71, 'Alternativní přístup k psaní dokumentace', 'alternativni-pristup-k-psani-dokumentace', '2022-12-13',
        '<p>Většina vývojářů se shodne na tom, že je dobré psát testy a dokumentaci. Většina vývojářů se shodne i na tom, že na tyto věci většinou nezbývá čas. Jak tedy najít cestu ke splnění úkolu za zlomek času? Jak uplatnit Paretovo pravidlo 80% funkce za 20% času? <br />Řešení existuje. Napiště dokumentaci, ale zkraťte ji na minimum.<br />Místo vypisování co má jít do funkce a co jde z funkce a jak to celé uvnitř funguje se zaměřte na základy. Obecnou řečí a žádné složitosti:</p>\n<ul>\n<li>co to má dělat (jaký byl cíl a původní záměr)</li>\n<li>za jakých podmínek to bude fungovat</li>\n<li>zápis častých problémů, které se při vývoji řešily (může pomoci při potřebě rychlého bugfixu)</li>\n</ul>\n<p>Zbytek si ostatní vývojáři mohou dohledat v kódu.<br />Jednak to slouží jako dobrá obrana, pokud by od toho někdo chtěl víc, než bylo původně domluveno.<br />A také si pak takové readme mohou přečíst a pochopit i neprogramátoři. Je to jednodušší a použitelnější.<br />Osobně někdy používám v initial commitu TODO file, který dám přímo do rootu projektu. A když několik bodů z něj zprovozním a přidám, do GITu potom jde jak kód s nějakým komentářem, ale i TODO soubor, kde je vyškrtaných několik bodů, případně přidané řádky v readme. Slouží to tedy i jako určitý archiv historie vývoje. A kdyby vám náhodou někde zůstala stará commit message nebo jste ji napsali nedostatečně konkrétní, máte jak ji to snadno dohledat.</p>',
        0, 0, 0),
       (72, 'Programátorské side skills', 'programatorske-side-skills', '2022-12-13',
        '<p>Programátor potřebuje umět dobře programovat, rozumět datům se kterými pracuje a nástrojům, které používá. Umět psát testy a testovat samotnou aplikaci nebo web na zátěž ve vysokém provozu, rychlost reakce atd. Jaké další schopnosti se mu ale hodí pro jeho práci o kterých se běžně nemluví ale přesto se vyplatí je umět?<br /><strong>Aktivní naslouchání</strong><br />Pokud umíte správně naslouchat a dávat doplňující otázky, lépe pochopíte souvislosti, které jsou součástí úkolu, který je vám předán. Pokud skutečně rozumíte tomu proč po vás někdo něco chce a ne jen co a jak, můžete mu pomoci mnohem více než pouhým programováním. Můžete mu pomoci efektivně vyřešit problém, který mu vadí. Pokud po vás chce nástroj na export dat z DB a neřekne vám, že ho pak bude dále upravovat v excelu a převádět data a formáty, nebudete to vědět. Když se ale aktivně budete zajímat o kontext, který se kolem úkolu točí, a dáte mu tuto otázku, zjistíte, že mu můžete pomoci ještě lépe, než on sám ví že je možné. Můžete mu data rovnou přepočítat, doplnit, přeformátovat a váš program to udělá rychleji než on. Můžete mu nastavit do exportu různé volby které budou měnit nastavení a nebude vás to stát o moc práce navíc.<br /><strong>Znalost domény </strong><br />Je to jako rozdíl mezi stavbyvedoucím a nájemníkem. Nájemník zná chodbu, výtah, schodiště a svůj byt. Stavbyvedoucí ví, kudy vede elektřina, voda, odpad, odvětrávací šachta, internet, kabely z antén, kde je požární východ atd. Není potřeba vědět vše o všem.</p>',
        0, 0, 0),
       (73, 'Vědět, kdy přestat je někdy důležitější než vědět, kdy začít',
        'vedet-kdy-prestat-je-nekdy-dulezitejsi-nez-vedet-kdy-zacit', '2022-12-13',
        '<p>Bod, kdy se projekt přestává vyplácet je dost důležitý milník, který je potřeba si nejen uvědomit, ale také se podle něj zařídit. Dám příklad. <br /><em>Vyrábím program, který má přefiltrovat surová data. Během 20 hodin se dostanu na odchycení cca 75% dat. To je pro firmu/zákazníka obrovský úspěch. Ideál je sice, aby to fungovalo na 100% ale stačí se zamyslet nad tím, co tento krok přináší a člověku to hned dojde. </em><br /><em>Pokud programátorovi firma zaplatí 20 hodin, plus nějaké konzultace, školení, ladění atd. dejme tomu 40000 Kč, kolik v tuto chvíli ušetří? To záleží na tom, kolik hodin práce se na získávání dat vynaložilo. Pokud to byl 1 den práce 1 člověka, dejme tomu 6000 Kč za měsíc, tak program ušetří 4500 měsíčně. Pak se po 9 měsících program začne vyplácet. </em><br />Pokud bych na programu dělal další den za 16000 Kč a zvýšil bych účinnost o dalších 10%, jak bychom na tom byli teď? Program by ušetřil 5100 Kč za měsíc, ale stál by 56 000 Kč. Zaplatil by se tedy po 11 měsících.<br />A co ještě 2 dny a účinnost 95%? Cena 88 000 Kč a úspora 5700 Kč za měsíc. Vyplatilo by se to až po 15 a půl měsících.<br /><strong>Jaký by byl ale zisk dejme tomu za druhý a třetí rok provozu?</strong><br />75% - 15 x úspora 4500 Kč = 67500 Kč<br />85% - 13 x úspora 5100 Kč = 66400 Kč<br />95 % - 8.5 x úspora 5700 Kč = 48450 Kč<br /><span style=\"text-decoration: underline;\">První varianta o kousek vede, druhá těsně za ní. </span><strong>Co ale třetí rok použití?</strong><br />75% - 67500 + 54000 (12 * 4500) = 121500 Kč<br />85% - 66400 + 61200 (12 * 5100) = 127600 Kč<br />95% - 48450 + 68400 (12 * 5700) = 116850 Kč<br /><span style=\"text-decoration: underline;\">Druhá varianta již začíná utíkat první.</span> <strong>Co kdybychom šli ještě o rok dál?</strong><br />75% - 121500 + 54000 = 175500 Kč<br />85% - 127600 + 61200 = 188800 Kč<br />95% - 116850 + 68400 = 185250 Kč<br /><span style=\"text-decoration: underline;\">Třetí varianta předehnala první a téměř dohnala druhou.</span><br />Co z toho vyplývá? Že je potřeba si jednoduchým propočtem orientačně zjistit, jaké řešení se kdy vyplatí. Plánovat software na více jak 4 roky použití už je značně složité. Mnoho věcí se za tu dobu může změnit. Krátkodobě se vyplatí nejjednodušší řešení. Dlouhodobě to nejpropracovanější. každá varianta má své optimální použití. A hnát se v tomto případě slepě za 100%? Člověk by dost možná skončil jako zajíc v závodu se želvou. To, co jde snadno zpracovat strojově se vyplatí zpracovat strojově. To, co je složité je lepší přenechat odborníkovi, protože programátorovi téměř vždy proklouzne nějaký výjimečný případ. Ne vždy potřebujeme nutně 100% funkční produkty. Čím by byly propracovanější, tím by byly složitější a bylo by náročnější je v případě potřeby změnit.</p>',
        0, 0, 0),
       (74, 'Command a  datové migrace', 'command-a-datove-migrace', '2022-12-13',
        '<p>Lukostřelba mě naučila jednu efektivní zásadu. Pokud nedokážeš svůj úspěch opakovat, jde jen o štěstí (pozitivní náhodu). Občas když jsem mluvil s někým z jiného oboru, dověděl jsem se, že po nich klient chce nestandardní úkol. Chlapi se na dílně nějak domluví, dají něco dohromady, pomůžou si k cíli tím a tamhle tím a podaří se. Ale zákazník pak přijde a řekne: ten vzorek se na testovacím dnu moc líbil, chtěli bychom jich 100. A dělníci marně vzpomínají, jak že to před tím měsícem a půl vlastně udělali. A jak to udělat znovu. Což mě vedlo k zamyšlení, kde je chyba a jak to vyřešit.<br />První problém je dle pořekadla: <strong>líná huba, holé neštěstí</strong>. Člověk se nezeptá, proč že to vlastně chce něco vyrobit takto nestandardně. Kdyby se k němu dostala informace, že jde o vzorek, který možná půjde do sériové výroby, člověk by k tomu hned přistupoval jinak. Řešením je dokumentace. Když si každý nestandardní výrobek zdokumentuji, alespoň fotkou, lépe i krátkým popisem, bude se mi to znovu replikovat mnohem lépe. Nemá asi smysl dělat na každou věc technický výkres a postup výroby. Ale nechat to úplně jen tak taky nepřináší moc úspěchu. Člověk pak vlastně musí jednu věc řešit a vynalézat dvakrát. Na to taky máme pořekadlo: <strong>Proč znovu vynalézat trakař, když už ho někdo vymyslel?</strong> Udělat si pár fotek je zlomek času, který strávím nad přemýšlením a vzpomínáním, jak ono to tehdy bylo.<br />Command a datové migrace jsou právě takovým přístupem, který mi dává zdokumentovanou historii a opakovatelný proces. Migrace navíc nabízí i zpětný efekt, mají tedy metody up a down. A to, co jsem vyvolal pak mohu rychle vrátit. Samozřejmě za splnění předpokladu, že je down metody napsaná správně. Ale už jen tím, že vím, co se přesně provedlo, mohu to jít vrátit, pokud to jde. A hlavně to mohu jít zkontrolovat případně otestovat.<br />Jedná se tedy o skvělou praxi, kterou je možné v principu zavést do různých oblastí lidského fungování. Programování se k tomu přímo nabízí ve spojení s dalšími nástroji na verzování, testování, dokumentaci atd.<br />Tip na migrace: <a href=\"https://phinx.org/\" target=\"_blank\" rel=\"noopener\">phinx</a><br />Tip na spouštění commandu: <a href=\"https://symfony.com/doc/current/console.html\" target=\"_blank\" rel=\"noopener\">symfony console </a></p>',
        0, 0, 0),
       (75, 'Kolekce s fluent interface místo array functions', 'kolekce-s-fluent-interface-misto-array-functions',
        '2022-12-13',
        '<p>Také se vám někdy zdá použití smyček  řešení podmínek nepřehledné? Příklad:<br /><span style=\"color: #7e8c8d;\">$favoritePosts = [];</span></p>\n<p><span style=\"color: #7e8c8d;\">foreach ($this-&gt;getUsers() as $user) {</span><br /><span style=\"color: #7e8c8d;\">    if (!$user-&gt;isVerified()) {</span><br /><span style=\"color: #7e8c8d;\">        continue;</span><br /><span style=\"color: #7e8c8d;\">    }</span><br /><span style=\"color: #7e8c8d;\">    foreach ($user-&gt;getPosts() as $post) {</span><br /><span style=\"color: #7e8c8d;\">        if (!$post-&gt;getLikes()) {</span><br /><span style=\"color: #7e8c8d;\">            continue;</span><br /><span style=\"color: #7e8c8d;\">        }</span><br /><span style=\"color: #7e8c8d;\">        $favoritePosts[$user-&gt;getId()] = $post;</span><br /><span style=\"color: #7e8c8d;\">    }</span><br /><span style=\"color: #7e8c8d;\">}</span></p>\n<p><span style=\"color: #7e8c8d;\">if ($favoritePosts !== []) {</span><br /><span style=\"color: #7e8c8d;\">    $this-&gt;doSomething($favoritePosts);</span><br /><span style=\"color: #7e8c8d;\">}</span></p>\n<p><span style=\"text-decoration: underline;\">nevýhody</span>:</p>\n<ul>\n<li>různé úrovně odsazení</li>\n<li>smyčky mohou jít dle situace do různé úrovně zanoření</li>\n</ul>\n<p><em>řešení</em>:<br /><strong>nativní array funkce</strong><br /><span style=\"color: #7e8c8d;\">$verifiedUsers = array_filter(</span><br /><span style=\"color: #7e8c8d;\">    $this-&gt;getUsers(),</span><br /><span style=\"color: #7e8c8d;\">    fn ($user) =&gt; $user-&gt;isVerified()</span><br /><span style=\"color: #7e8c8d;\">);</span></p>\n<p><span style=\"color: #7e8c8d;\">$likedPosts = array_map(</span><br /><span style=\"color: #7e8c8d;\">    function($verifiedUser) {</span><br /><span style=\"color: #7e8c8d;\">        return array_filter(</span><br /><span style=\"color: #7e8c8d;\">            $verifiedUser-&gt;getPosts(),</span><br /><span style=\"color: #7e8c8d;\">            function($post) {</span><br /><span style=\"color: #7e8c8d;\">                return count($post-&gt;getLikes());</span><br /><span style=\"color: #7e8c8d;\">            }</span><br /><span style=\"color: #7e8c8d;\">        );</span><br /><span style=\"color: #7e8c8d;\">    },</span><br /><span style=\"color: #7e8c8d;\">    $verifiedUsers</span><br /><span style=\"color: #7e8c8d;\">);</span><br /><span style=\"text-decoration: underline;\">nevýhody</span>:</p>\n<ul>\n<li>stále různé úrovně odsazení</li>\n<li>funkce opět mohou jít do různé úrovně zanoření do sebe</li>\n</ul>\n<p><strong>zabalení smyček do vhodně pojmenovaných funkcí</strong><br /><span style=\"text-decoration: underline;\">nevýhody</span>:</p>\n<ul>\n<li>nečitelný kód se jen skryje před očima z hlavní funkce</li>\n</ul>\n<p><strong>kombinace vlastních funkcí a array_metod</strong><br /><span style=\"text-decoration: underline;\">nevýhody</span>:</p>\n<ul>\n<li>neexistuje jasný sjednocený postup, každý si napíše po svém, ostatní možná porozumí, možná ne</li>\n</ul>\n<p><strong>kolekce</strong>:<br /><span style=\"color: #7e8c8d;\">$likedPosts = Collection::from($this-&gt;getUsers())</span><br /><span style=\"color: #7e8c8d;\">    -&gt;filter(fn($user) =&gt; $user-&gt;isVerified())</span><br /><span style=\"color: #7e8c8d;\">    -&gt;indexBy(fn($user) =&gt; $user-&gt;getId())</span><br /><span style=\"color: #7e8c8d;\">    -&gt;map(function($user) {</span><br /><span style=\"color: #7e8c8d;\">        return Collection::from($user-&gt;getPosts())</span><br /><span style=\"color: #7e8c8d;\">            -&gt;filter(fn($post) =&gt; count($post-&gt;getLikes()));</span><br /><span style=\"color: #7e8c8d;\">    })</span><br /><span style=\"color: #7e8c8d;\">    -&gt;reject(fn($posts) =&gt; isEmpty($posts));</span></p>\n<p><span style=\"text-decoration: underline;\">výhody</span>:</p>\n<ul>\n<li>zarovnání se ustálilo a omezilo na 1-2 úrovně</li>\n<li>funkce mají srozumitelné názvy, podobné jako nativní array_metody</li>\n<li>funkce jdou primárně za sebou, nenoří se hluboko do sebe</li>\n<li>operace, jejich podmínky, nebo jejich pořadí se snadno upravují</li>\n</ul>',
        0, 0, 0),
       (76, 'Jak řešit technický dluh', 'jak-resit-technicky-dluh', '2022-12-13',
        '<p>Přeměňte ho na půjčku. Navrhněte si splátkový kalendář. Udělejte si v měsíci místo alespoň půl den (dle možností více) na jeho postupné splácení. Napiště si seznam bodů a postupně je zpracovávejte. Jakmile máte seznam, můžete na něm pracovat, když se příležitost nabídne sama (zrušená porada, projekt, přijde k vám student na měsíc na praxi). Pokud seznam máte, je vždy snazší si z něj vybrat alespoň pár krátkých věcí k refaktorování než to řešit na divoko.<br />A především dělejte moudrá rozhodnutí. Je snadné být líný a naklikat všude v DB varchar. Ale zpětně to přetypovat na správné druhy dat a testovat a hotfixovat kód, když se někde něco rozbije se opravdu nevyplatí. Některé chyby je lepší vůbec nedělat a uvědomit si, že získaný časový bonus je tak mizivý, že použitý zkratky je vlastně delší a horší trasa.</p>',
        0, 0, 0);

-- 2022-12-13 22:03:07


DROP TABLE IF EXISTS `post_category`;
CREATE TABLE `post_category`
(
    `id`          int(11)      NOT NULL AUTO_INCREMENT,
    `category`    varchar(255) NOT NULL,
    `description` varchar(255) DEFAULT NULL,
    PRIMARY KEY (`id`)
) ENGINE = MyISAM
  DEFAULT CHARSET = utf8mb4;

INSERT INTO `post_category` (`id`, `category`, `description`)
VALUES (1, 'programování', '');

DROP TABLE IF EXISTS `post_like`;
CREATE TABLE `post_like`
(
    `id`              int(11)     NOT NULL AUTO_INCREMENT,
    `post_id`         smallint(6) NOT NULL,
    `remote_address`  tinytext    NOT NULL,
    `user_agent`      tinytext    NOT NULL,
    `accept_language` tinytext    NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4;
